{"version":3,"sources":["NavMenu.js","Formatter.js","GreatHall.js","AboutPage.js","Arena.js","RaidJsonLoader.js","Numberer.js","Comparer.js","ArtifactPage.js","ArtifactDimensionChooser.js","ArtifactRune.js","MarkerRune.js","ChampionRune.js","ArtifactBumpPage.js","BarSpecifier.js","RangeSpecifier.js","ArtifactSellPage.js","SkillsFactory.js","BonusList.js","TotalStatsCalculator.js","ChampionDetailPage.js","ChampionPage.js","HeaderDetail.js","HelpPage.js","TopLevel.js","App.js","reportWebVitals.js","index.js"],"names":["NavMenu","arenaKey","label","arenaConfig","levels","some","arenaLevel","jsonKey","status","champions","length","greatHallLevels","total","Object","values","forEach","affinityDict","val","theme","mode","Item","onClick","props","handleShowPage","this","championsText","arenaText","greatHallText","React","Component","Formatter","factionsByKey","factionConfig","factions","faction","key","setsByJsonKey","artifactSetsConfig","sets","setSpec","state","num","suffixes","suffix","i","Math","round","setKey","factionKey","factionDict","src","process","icon","alt","title","attributeNames","isAbsolute","amount","ceil","bonus","rolls","value","kind","prefix","Attribute","BonusAmount","rank","labels","stat","Bonus","enhancement","glyphBonus","subStats","Stat","level","entries","subStat","index","push","className","artifact","setKind","additional","skillsArray","elements","skill","ofPart","maxLevel","class","name","id","GreatHall","columns","formatter","levelFilters","dataIndex","render","imgName","record","Image","greatHallConfig","columnSpec","renderHallRune","setState","bonuses","bonusMsg","filterText","style","colKey","colSpec","aColSpec","aBonus","txt","dataByRows","rows","bundle","affinity","rowData","colBundle","attr","pagination","dataSource","makeRowData","dumpAsTable","VERSION","AboutPage","href","Arena","isNow","showArenaBonuses","bonusText","bonusDict","arenaLabel","keyIn","toLowerCase","showArenaHeader","showArenaUI","RaidJsonLoader","fileReader","statusMessage","errorMessage","e","fileName","content","result","obj","JSON","parse","err","message","reporter","artifacts","heroes","arenaLeague","greatHall","fileObj","FileReader","onloadend","handleFileRead","onloadstart","handleLoadStart","readAsText","type","accept","onChange","handleFileChosen","target","files","Numberer","artifactMap","artifactTypeConfig","artifact_types","ordinality","rarityMap","raritiesConfig","rarities","spec","map","rarity","base","setOrdinalities","Comparer","count","setConfig","championSorters","c1","c2","Champions","ChampionsByRank","ChampionsByRarity","ChampionsByLevel","ChampionsByAffinity","ChampionsByMarker","ChampionsByFaction","artifactSorters","makeArtifactSorters","numberer","factionOrdinalities","factionSpec","ArtifactByRank","bind","ArtifactByLevel","ArtifactByFaction","ArtifactByRarity","ArtifactByKind","ArtifactBySetKind","ArtifactByMainStat","art1","art2","aFaction","requiredFraction","bFaction","localeCompare","Rank","Rarity","ArtifactKind","v1","v2","b1","primary","primaryBonus","b2","delta","a1","a2","dimension","sorter","aName","bName","m1","m2","RankFromStars","grade","element","marker","Marker","fraction","ArtifactPage","comparer","a","b","stats","Substats","Faction","champion","wearer","secondaryBonuses","isSeen","Option","Select","ArtifactDimensionChooser","defaultLabels","options","stopPropagation","initialValue","width","onSelect","ArtifactRune","artifactTypeMap","typeSpec","setSpecMap","factionSpecMap","containerDiv","msg","starsText","starsImg","baseImg","meatball","piece_icon_base","accessory_prefix","faction_icon_suffix","levelText","stars","toRight","MarkerRune","keyToSpec","markersConfig","markers","markerSpec","moreClassName","ChampionRune","affinityToSpec","rowSpec","surround","inStorage","evt","tryNum","imgUrl","newUrl","replace","affinitySpec","starTxt","maybeRarity","srcSet","maybeMarker","maybeVault","twoDigits","ArtifactBumpPage","artifactDimension","newDimension","vpGains","ArtifactsOn","onDimensionChange","compareArtifacts","vpGain","victoryPointsFor","BarSpecifier","is_lower_bound","initial","is_exact","ch","String","fromCharCode","onChangeBound","keys","display","height","intro","renderComparator","RangeSpecifier","opts","v","range","DONT_DISPLAY","WORN_KEYS","WORN_LABELS","ArtifactSellPage","slotLabels","slotKeys","artifactTypesConfig","typeConfig","substatLabels","substatKeys","substatsByKey","substatsConfig","substats","substatConfig","checkers","marks","labelInfo","makeLabelInfo","is_range","onRankRangeChange","dynamic","rankRange","defaultValue","min","max","step","fn","CheckByRankRange","RARITY_LABELS","onRarityRangeChange","rarityRange","tipFormatter","tooltipVisible","CheckByRarityRange","onLevelRangeChange","levelRange","CheckByLevelRange","onSlotBarChange","slotBar","CheckBySlot","substatCheckerId","onSubstatBarChange","substatBar","CheckBySubstat","onRollRangeChange","rollRange","CheckByRollRange","onWornBarChange","wornBar","CheckWorn","CheckAttackAmulets","CheckDefenseRingWithoutTwoGoodSubstats","ttip","CheckDefensiveRingWithoutDefensiveSubstats","CheckNonLegoRingWith2BadSubstats","CheckTopRowWith2BadSubstats","CheckAtkPercentGloves","CheckMostCDGloves","CheckNonLegoNonSpeedBoots","CheckDefensiveBootsWithoutSpeed","CheckThreeSubstatsNoSpeed","CheckBottomRowFlatMainStat","checkedByCheckerId","checker","CheckUnwornGear","rollBar","roll_is_lower_bound","info","extra","secondaries","mainKind","numGood","numBad","topKinds","indexOf","badSubs","bads","kindLc","join","asNum","bounds","substatKey","found","lc","attrKey","substat","attrIsAbsolute","whys","main","newState","cur","body","text","bar","dynamicProps","stamped","assign","curCols","span","size","checked","onFilterChange","checkerHtmlLabel","why","shown","passesAll","renderSelectorPart","SkillsFactory","skillMap","skillsConfig","skills","skillSpec","Id","champ","skillBundle","typeId","Name","Levels","BonusList","BASE_COLUMN","ARTIFACTS_COLUMN","GREAT_HALL_COLUMN","ARENA_COLUMN","MASTERIES_COLUMN","TOTALS_COLUMN","TotalStatsCalculator","greatHallBonusMap","configCol","bonusEntry","artifactSetInfo","artifactSetConfig","set","artifactLabelsBySlot","artifactsById","computeBaseStats","computeArenaStats","computeArenaData","elt","computeGreatHallStats","setCounts","computeSets","computeSetBonuses","computeMasteries","masteries","addPieceBonuses","columnsIn","totalColumn","columnsOut","attributesConfig","attributes","attrSpec","attrLc","baseVal","totalValue","columnKey","bakeCell","Add","rawColumns","MakeRaw","Bake","listIn","listOut","Bonuses","bonusIn","AddBonus","EvaluateBonus","amt","masteryIds","column","masteriesConfig","masterySpec","tuple","setBonusFor","setName","setBonus","amplification","toAttr","bonusOut","artifactIds","artifactId","artifactInfo","artifactLabel","asList","tweakCRCD","data","arenaData","levelsByAttr","champName","counts","filtered","minSize","set_size","times","floor","console","log","numSets","setInfo","ChampionDetailPage","attributesByJsonKey","artifactTypesByKey","option","markerKey","answer","prompt","curChamp","markerFromKey","placeholder","filterOption","inputValue","toUpperCase","bonusList","list","calculator","knownChampionTotalStats","MakeAndBake","cols","rowDataKeys","rowDataKey","cellBonuses","toShow","hasDetail","cellTotal","parts","ul","focus","cellWidth","ownedByKind","unfoundArtifactIds","artifactObj","rowCells","rowNum","renderArtifact","gutter","stringify","SkillsFor","Skills","masterySpecs","numMasteries","sort","branch","tier","inBranch","prevBranchName","img","blurb","role","renderArtifacts","renderMasteries","renderSkills","renderTotalStats","renderAutoCompleter","renderChamp","RANK_KEYS","AFFINITY_KEYS","AFFINITY_LABELS","void","force","magic","spirit","VAULT_KEYS","VAULT_LABELS","BOOKS_NONE","BOOKS_SOME","BOOKS_KEYS","BOOKS_LABELS","MASTERIES_NONE","MASTERIES_SOME","MASTERIES_KEYS","MASTERIES_LABELS","ChampionPage","rankLabels","factionKeys","factionLabels","initialFactionKey","initialFactionOrdinality","factionsConfig","affinityBar","rankBar","vaultBar","markerBar","factionBar","booksBar","masteriesBar","onAffinityBarChange","CheckAffinity","onFactionBarChange","CheckFaction","onVaultBarChange","CheckVault","onBooksBarChange","CheckBooks","onMasteriesBarChange","CheckMasteries","markerKeys","markerLabels","onMarkerBarChange","CheckMarker","CheckHasDupe","CheckUnderAscended","CheckMissingArmor","CheckInferiorGear","CheckInferiorRarity","CheckGlyphable","CheckMissingAccessory","attributesByKey","includeTotalStats","championDimension","howMany","NumMasteriesFor","passes","skillsFactory","unbooked","partiallyBooked","fullyBooked","numSkills","championCounts","ascensions","awakenLevel","numWorn","attribute","glyphable","artifactType","isAccessory","rankNeeded","ascensionsNeeded","wearing","lcKey","artRank","pieces","ArtifactShort","numCalced","totalStats","t0","Date","now","newStats","t1","reportNewTotalStats","onIncludeTotalStatsChange","championTotalStats","getTotalStat","champ1Stats","champ2Stats","headerEntry","renderTotalStat","compareTotalStat","champion_total_stats","ChampionsOn","s1","s2","levels1","levels2","championSorter","skillsSorter","addStatsColumnHeaders","renderDisplayModePart","HeaderDetail","HelpPage","textAlign","color","TopLevel","currentPage","lockedSlots","eligibleRanks","hasDoneSomething","idleTimer","idleCounter","totalStatsCalculator","which","ReactGA","initialize","pageview","window","location","pathname","search","localStorage","getItem","onLoadJson","onComputeTotalStats","firstIndex","nextIndexForTotalStats","champs","haveAllTotalStats","computeTotalStatsFor","champId","reset","doIdleProcessing","setItem","removeItem","newTotals","gearByIds","whichPage","onChooseChampion","onNewTotalStatsBulk","onGreatHallNewState","Header","Layout","Footer","Sider","Content","ref","document","onActive","onIdle","onAction","debounce","timeout","haveChamps","renderContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0b92acf4.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu } from 'antd';\nimport arenaConfig from './config/arena.json';\n\n// props:\n// arenaKey - key into current arena level\n// greatHallLevels - hash of great hall levels, indexed by affinity.\n// lockedSlots - which types of armor are locked\n// eligibleRanks - which ranks are eligible\n// fileName - last loaded fileName\nclass NavMenu extends React.Component {\n  arenaText(arenaKey) {\n    if (!arenaKey) {\n      return <div>Arena</div>\n    }\n    var label = null;\n    arenaConfig.levels.some((arenaLevel) => {\n      if (arenaLevel.jsonKey === arenaKey) {\n        label = arenaLevel.label;\n        return true;\n      }\n      return false;\n    });\n    return <div status=\"gtg\">Arena: {label}</div>\n  }\n  championsText(champions) {\n    if (!champions || champions.length === 0) {\n      return <div>View Champions</div>\n    }\n    return <div status=\"gtg\">View some Champions</div>\n  }\n  greatHallText(greatHallLevels) {\n    if (!greatHallLevels || greatHallLevels.length === 0) {\n      return <div>Great Hall</div>\n    }\n    var total = 0;\n    Object.values(greatHallLevels).forEach((affinityDict) => {\n      Object.values(affinityDict).forEach((val) => {\n        total += val;\n      });\n    });\n    if (total === 0) {\n      return <div>Great Hall</div>\n    }\n    return <div status=\"gtg\">Great Hall: {total} levels</div>\n  }\n  render() {\n    return (\n      <Menu theme=\"light\" mode=\"inline\">\n        <Menu.Item onClick={() => this.props.handleShowPage('load json')}><span>Load JSON</span></Menu.Item>\n        <Menu.Item onClick={() => this.props.handleShowPage('champions')}>\n          {this.championsText(this.props.champions)}\n        </Menu.Item>\n        <Menu.Item onClick={() => this.props.handleShowPage('sell artifacts')}>\n          View some artifacts\n        </Menu.Item>\n        <Menu.Item onClick={() => this.props.handleShowPage('bump artifacts')}>\n          Artifact Enhancement\n        </Menu.Item>\n        <Menu.Item onClick={() => this.props.handleShowPage('champion chooser')}>Champion Detail</Menu.Item>\n        <Menu.Item onClick={() => this.props.handleShowPage('arena')}>{this.arenaText(this.props.arenaKey)}</Menu.Item>\n        <Menu.Item onClick={() => this.props.handleShowPage('great hall')}>{this.greatHallText(this.props.greatHallLevels)}</Menu.Item>\n        <Menu.Item onClick={() => this.props.handleShowPage('about')}>About</Menu.Item>\n        <Menu.Item onClick={() => this.props.handleShowPage('help')}>Help</Menu.Item>\n      </Menu >\n    );\n  }\n}\n\nexport default NavMenu;","\nimport factionConfig from './config/factions.json';\nimport artifactSetsConfig from './config/artifact_sets.json';\n\nclass Formatter {\n    constructor() {\n        var factionsByKey = {};\n        factionConfig.factions.forEach((faction) => {\n            factionsByKey[faction.key] = faction;\n        });\n        var setsByJsonKey = {}\n        artifactSetsConfig.sets.forEach((setSpec) => {\n            if ('jsonKey' in setSpec) {\n                setsByJsonKey[setSpec.jsonKey] = setSpec;\n            }\n        });\n        this.state = {\n            factionsByKey: factionsByKey,\n            setsByJsonKey: setsByJsonKey\n        }\n    }\n\n    MoreReadableNumber(num) {\n        var suffixes = [\"thousand\", \"million\", \"billion\"];\n        var suffix = \"\";\n        for (let i = 0; i < suffixes.length; i++) {\n            if (num < 1000) break;\n            num /= 1000;\n            suffix = suffixes[i];\n        }\n        return [Math.round(num), suffix];\n    }\n\n    SetName(setKey) {\n        if (setKey in this.state.setsByJsonKey) {\n            return this.state.setsByJsonKey[setKey].label;\n        } else {\n            return setKey;\n        }\n    }\n\n    Faction(factionKey) {\n        var factionDict = this.state.factionsByKey[factionKey];\n        if (!factionDict) {\n            return factionKey;\n        }\n        return <img key={factionKey} src={process.env.PUBLIC_URL + factionDict.icon}\n            alt={factionDict.label}\n            title={factionDict.label} />;\n    }\n\n    FactionLabel(factionKey) {\n        var factionDict = this.state.factionsByKey[factionKey];\n        if (!factionDict) {\n            return factionKey;\n        }\n        return factionDict.label;\n    }\n\n    Attribute(key) {\n        var attributeNames = {\n            'hp': 'HP',\n            'atk': 'ATK',\n            'def': 'DEF',\n            'CriticalDamage': 'Crit Damage',\n            'cd': 'C.DMG',\n            'cr': 'C.RATE',\n            'CriticalChance': 'Crit Rate',\n            'res': 'RES',\n            'acc': 'ACC',\n            'glyph': ''\n        };\n        return (key in attributeNames) ? attributeNames[key] : key;\n\n    }\n\n    BonusAmount(isAbsolute, amount) {\n        if (isAbsolute) {\n            return '+' + amount;\n        } else {\n            return Math.ceil(amount * 100) + '%';\n        }\n    }\n\n    // (bonus) is a dict with (kind), (isAbsolute), and (value) keys\n    // (rolls) is how many rolls the stat/substat has.\n    Bonus(bonus, rolls) {\n        if (!bonus || !('value' in bonus) || (bonus.value === 0)) {\n            return \"\";\n        }\n        var kind = ('kind' in bonus) ? bonus['kind'] : bonus['what'];\n        var prefix = this.Attribute(kind);\n        if (rolls > 0) {\n            prefix += \" (\" + rolls + \")\";\n        }\n        return prefix + ((prefix && prefix.length > 0) ? ' ' : '')\n            + this.BonusAmount(bonus.isAbsolute, bonus.value);\n    }\n\n    Rank(rank) {\n        if (!rank || (typeof (rank) === \"string\")) {\n            return rank;\n        }\n        var labels = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n        return (rank > 0 && rank <= labels.length) ? labels[rank - 1] : rank;\n    }\n\n    // a Stat\n    Stat(stat, rolls) {\n        //console.log(\"stat = \" + JSON.stringify(stat));\n        var bonus = this.Bonus(stat, rolls)\n        if (stat.enhancement > 0) {\n            var glyphBonus = {\n                kind: 'glyph',\n                isAbsolute: stat.isAbsolute,\n                value: stat.enhancement\n            }\n            bonus += \" +(\" + this.Bonus(glyphBonus, 0) + \")\";\n        }\n        return bonus;\n\n    }\n\n    // an array of substats.\n    Substats(subStats) {\n        if (!subStats || subStats.length === 0) {\n            return null;\n        }\n        if (subStats.length === 1) {\n            return this.Stat(subStats[0], subStats[0].level);\n        }\n        var entries = [];\n        subStats.forEach((subStat, index) => {\n            entries.push(<li key={index}>{this.Stat(subStat, subStat.level)}</li>);\n        });\n        return <ul className=\"substats\">{entries}</ul>;\n    }\n\n    // an artifact in short form, for champions page\n    ArtifactShort(artifact) {\n        if (typeof (artifact) === \"string\") {\n            return artifact;\n        }\n        return artifact.kind + \" \"\n            + artifact.rank + \"*\"\n            + \" (\" + artifact.setKind + \")\"\n            + \",\" + artifact.level;\n    }\n\n    // makes it a litle easier to make an image.\n    // you give it:\n    // (a) the src attribute - required. Local\n    // (b) the alt/label attribute - uses same for both\n    // (c) any additional attributes in a hash\n    Image(src, label, additional) {\n        if (!additional) {\n            additional = {};\n        }\n        return (\n            <img src={process.env.PUBLIC_URL + src} title={label} alt={label} {...additional} />\n        );\n    }\n\n    Skills(skillsArray) {\n        var elements = [];\n        skillsArray.forEach((skill) => {\n            var ofPart = skill.maxLevel > 0 ? (\"/\" + skill.maxLevel) : \"\";\n            elements.push(<li key={skill.id}><span class=\"skill_name\">{skill.name}</span>, level {skill.level}{ofPart}</li>);\n        })\n        return (<ul className=\"skills_list\">{elements}</ul>);\n    }\n}\n\nexport default Formatter;\n","import React from 'react';\nimport { Table } from 'antd';\nimport greatHallConfig from './config/great_hall.json';\nimport Formatter from './Formatter';\n\n// props:\n// greatHallLevels - hash maps from affinities to hash maps from attributes to values.\n// \nclass GreatHall extends React.Component {\n    // the GreatHall owns the column specs\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            formatter: new Formatter(),\n            // transform the color scheme depending on level:\n            levelFilters: [\n                \"hue-rotate(177deg) saturate(1.00) brightness(0.55)\", // black\n                \"none\", // keep brown brown\n                \"none\",\n                \"none\",\n                \"hue-rotate(183deg) saturate(2.57) brightness(0.78)\", // blue\n                \"hue-rotate(183deg) saturate(2.57) brightness(0.78)\",\n                \"hue-rotate(183deg) saturate(2.57) brightness(0.78)\",\n                \"hue-rotate(39deg) saturate(2.93) brightness(1.37)\", // gold\n                \"hue-rotate(39deg) saturate(2.93) brightness(1.37)\",\n                \"hue-rotate(39deg) saturate(2.93) brightness(1.37)\",\n                \"hue-rotate(39deg) saturate(2.93) brightness(1.37)\"\n            ]\n        }\n\n    }\n    componentDidMount() {\n        // initialize the great hall columns from the config data.\n        // each column has these fields:\n        // title: the header text\n        // dataIndex: field in (dataByRows) to reference\n        // render: knows how to render that column for that data.\n        const columns = [\n            {\n                title: 'Affinity',\n                dataIndex: 'icon',\n                key: 'icon',\n                render: (imgName, record) => (\n                    this.state.formatter.Image(imgName, record.label)\n                )\n            }\n        ];\n        greatHallConfig.columns.forEach((columnSpec) => {\n            columns.push(\n                {\n                    key: columnSpec.key,\n                    title: columnSpec.label,\n                    dataIndex: columnSpec.key,\n                    render: (value) => this.renderHallRune(columnSpec, value)\n                }\n            )\n        });\n        this.setState({ columns: columns });\n\n    }\n\n    renderHallRune(columnSpec, value) {\n        var bonus = (columnSpec.bonuses && value >= 1) ? columnSpec.bonuses[value - 1] : null;\n        var bonusMsg = bonus ? this.state.formatter.BonusAmount(bonus.isAbsolute, bonus.value) : null;\n        var filterText = this.state.levelFilters[value];\n        return (\n            <div className=\"great_hall_rune\">\n                <div className=\"container\">\n                    {this.state.formatter.Image(columnSpec.icon, value,\n                        { className: \"great_hall_icon\", style: { \"filter\": filterText } })}\n                    <div className=\"floats_above hall_level_overlay\">{value}/10</div>\n                    <div className=\"floats_above hall_bonus_overlay\">{bonusMsg}</div>\n                </div>\n            </div>\n        )\n    }\n\n    showBonus(colKey, value) {\n        var colSpec = null;\n        greatHallConfig.columns.some((aColSpec) => {\n            if (aColSpec.key === colKey) {\n                colSpec = aColSpec;\n                return true;\n            }\n            return false;\n        });\n        if (colSpec === null) {\n            return (null);\n        }\n        var bonus = null;\n\n\n        colSpec.bonuses.some((aBonus) => {\n            if (aBonus.level === value) {\n                bonus = aBonus;\n                return true;\n            }\n            return false;\n        });\n        if (bonus === null) {\n            return (null);\n        }\n        var formatter = new Formatter();\n        var txt = formatter.BonusAmount(bonus.isAbsolute, bonus.value);\n        return (<span><i>&nbsp;{txt}</i></span>);\n    }\n\n    // return the row data\n    makeRowData() {\n        // each row of data has these fields:\n        // icon - used at the left edge.\n        // <X> - value of attribute X (hp, def, etc.).\n        // label - alt text in first column.\n        // then (n) fields, one for each attribute.\n        const dataByRows = [\n        ];\n        var levels = this.props.greatHallLevels;\n        greatHallConfig.rows.forEach((bundle, index) => {\n            var affinity = bundle.key;\n            var rowData = {\n                key: bundle.key,\n                icon: bundle.icon,\n                label: bundle.label\n            };\n            greatHallConfig.columns.forEach((colBundle) => {\n                var attr = colBundle.key;\n                var level = (levels && levels[affinity]) ? levels[affinity][attr] : 0;\n                rowData[attr] = level;\n            });\n            dataByRows.push(rowData);\n        });\n        return dataByRows;\n    }\n\n    dumpAsTable() {\n        return (<Table pagination={false} dataSource={this.makeRowData()} columns={this.state.columns} />);\n\n    }\n    render() {\n        return (\n            <div>\n                {this.dumpAsTable()}\n            </div>\n        );\n    }\n}\n\nexport default GreatHall;\n","import React from 'react';\n\nexport const VERSION = \"1.22\";\n\nclass AboutPage extends React.Component {\n    render() {\n        return (<div>\n            <p>Version {VERSION}.</p>\n            <p>Project is on Github at <a href=\"https://github.com/kfishkin/brago\">kfishkin/brago</a></p>\n            <p>\n                You can contact me at <a href=\"mailto:i.am.badger.ken@gmail.com\">i.am.badger.ken@gmail.com</a>\n            </p>\n        </div>);\n    }\n}\nexport default AboutPage;","import React from 'react';\nimport arenaConfig from './config/arena.json';\nimport Formatter from './Formatter';\n\n//\n// props:\n// arenaKey key into the various arena levels.\nclass Arena extends React.Component {\n\n    showArenaUI(arenaKey) {\n        var levels = [];\n        arenaConfig.levels.some((arenaLevel) => {\n            var isNow = (arenaKey === arenaLevel.jsonKey);\n            if (!isNow) {\n                return false;\n            }\n            var className = isNow ? \"arena_current_level\" : \"arena_level\"\n            levels.push(\n                <div className={className}>\n                    <img src={arenaLevel.icon} alt={arenaLevel.label} />\n                    <br />\n                    <span className=\"arena_label\">{arenaLevel.label}</span>\n                </div >);\n            return true;\n        });\n        return (<div>{levels}<div>{this.showArenaBonuses(arenaKey)}</div></div>);\n    }\n\n    showArenaBonuses(arenaKey) {\n        if (!arenaKey) {\n            return null;\n        }\n        var bonuses = [];\n        arenaConfig.levels.some((arenaLevel) => {\n            if (arenaLevel.jsonKey === arenaKey) {\n                bonuses = arenaLevel.bonuses;\n                return true;\n            }\n            return false;\n        });\n        if (!bonuses) return null;\n        var bonusText = \"Bonuses: \";\n        bonuses.forEach((bonusDict, index) => {\n            if (index !== 0) {\n                bonusText += \", \";\n            }\n            var formatter = new Formatter();\n            bonusText += formatter.Bonus(bonusDict, 0);\n        });\n        return (<div><span>{bonusText}</span></div>);\n    }\n\n    showArenaHeader(arenaKey, arenaLabel) {\n        if (!arenaKey) {\n            return (<h2>No arena level specified.</h2>);\n        }\n        return (<div><h2>You are at arena level {arenaLabel}</h2>\n            {this.showArenaBonuses(arenaKey)}\n        </div>);\n    }\n    render() {\n        var arenaKey = null;\n        var arenaLabel = null;\n        var keyIn = this.props.arenaKey.toLowerCase();\n        arenaConfig.levels.some((arenaLevel) => {\n            if (arenaLevel.jsonKey === keyIn) {\n                arenaKey = keyIn;\n                arenaLabel = arenaLevel.label;\n                return true;\n            }\n            return false;\n        });\n        return (\n            <div>\n                {this.showArenaHeader(arenaKey, arenaLabel)}\n                {this.showArenaUI(arenaKey)}\n            </div>\n        );\n    }\n}\n\nexport default Arena;","import React from 'react';\n\nclass RaidJsonLoader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileReader: null,\n      statusMessage: null,\n      errorMessage: null\n    }\n  }\n\n  handleFileRead(e, fileName) {\n    var content = this.state.fileReader.result;\n    this.setState({ fileReader: null, statusMessage: \"done loading\" });\n    var obj = null;\n    try {\n      obj = JSON.parse(content);\n    } catch (err) {\n      this.setState({ fileReader: null, errorMessage: err.message, statusMessage: \"error loading\" });\n      return;\n    }\n    this.setState({ fileReader: null, errorMessage: null });\n    //console.log('handleFileRead: hall = ' + obj.greatHall);\n    this.props.reporter(obj.artifacts, obj.heroes, fileName, obj.arenaLeague, obj.greatHall);\n    var msg = \"data loaded\";\n    this.setState({ statusMessage: msg });\n  }\n\n  handleLoadStart(e) {\n    this.setState({ statusMessage: \"started to load...\" });\n  }\n\n  handleFileChosen(fileObj) {\n    var fileReader = new FileReader();\n    fileReader.onloadend = (e) => this.handleFileRead(e, fileObj.name);\n    fileReader.onloadstart = (e) => this.handleLoadStart(e);\n    this.setState({ 'fileReader': fileReader });\n    fileReader.readAsText(fileObj);\n\n  }\n  render() {\n    return (\n      <div>\n        <p>Upload the JSON file you got from RaidExtractor.\n        That contains the Champion, Artifact, Arena, and Great Hall data.\n          </p>\n        <p>\n          {this.state.statusMessage ? (<span>{this.state.statusMessage}</span>) : ''}\n        </p>\n        <input type='file' accept='.json'\n          onChange={e => this.handleFileChosen(e.target.files[0])} />\n        {this.state.errorMessage ? (<div className=\"error_message\">{this.state.errorMessage}</div>) : null}\n      </div>\n    );\n  }\n}\n\nexport default RaidJsonLoader;","\n\nimport artifactTypeConfig from './config/artifact_types.json';\nimport raritiesConfig from './config/rarities.json';\n\nclass Numberer {\n    // convert from 'Five', 'Three', etc.\n    constructor() {\n        this.artifactMap = {};\n        artifactTypeConfig.artifact_types.forEach((bundle) => {\n            this.artifactMap[bundle.key] = bundle.ordinality;\n        });\n        this.rarityMap = {};\n        raritiesConfig.rarities.forEach((spec) => {\n            this.rarityMap[spec.key] = spec;\n        });\n    }\n    Rank(rank) {\n        if (typeof (rank) === \"number\") {\n            return rank;\n        }\n        var map = {\n            'zero': 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6\n        };\n        var key = rank.toLowerCase();\n        return (key in map) ? map[key] : key;\n    }\n    // convert from 'Stars4', 'Stars5', etc.\n    RankFromStars(rank) {\n        var map = {\n            'stars0': 0,\n            'stars1': 1,\n            'stars2': 2,\n            'stars3': 3,\n            'stars4': 4,\n            'stars5': 5,\n            'stars6': 6\n        };\n        var key = rank.toLowerCase();\n        return (key in map) ? map[key] : key;\n    }\n    // convert from 'Common', 'Epic', etc.\n    Rarity(rarity) {\n        var key = rarity.toLowerCase();\n        return (key in this.rarityMap) ? this.rarityMap[key].ordinality : 0;\n    }\n    // convert from 'Ring', 'Shield' etc. to a sort order.\n    // note that Amulets are 'Cloak'\n    ArtifactKind(kind) {\n        var key = kind.toLowerCase();\n        return (key in this.artifactMap) ? this.artifactMap[key] : key;\n    }\n\n    // apply a bonus to a given base value.\n    EvaluateBonus(base, bonus) {\n        if (!bonus) return base;\n        var val = ('enhancement' in bonus) ? bonus.enhancement : 0.0;\n        val += bonus.value;\n        // an increase to crit chance or crit damage _says_ it's relative,\n        // but really is absolute and 100*larger: a 0.5 bump to a 10% base\n        // is 60%, not 15%. Grrr...\n        var grr = {\n            'criticalchance': true, 'cr': true,\n            'criticaldamage': true, 'cd': true\n        };\n        var isAbsolute = bonus.isAbsolute;\n        if (bonus.kind.toLowerCase() in grr) {\n            isAbsolute = true;\n            //val *= 100;\n        }\n        return isAbsolute ? (base + val) : (base * val);\n    }\n\n}\n\nexport default Numberer;\n","\nimport Numberer from './Numberer';\nimport artifactSetsConfig from './config/artifact_sets.json';\nimport factionConfig from './config/factions.json';\n\n// collects the various comparison methods. DRY.\n// these methods are all 'static', they are exported\n// and pointed to directly and hence there is no class 'this'.\n\n// hence need the below as a package variable:\nvar setOrdinalities = {};\n\n// must start at 0, and go up by 1, and match the order\n// of the labels in the chooser.\nexport const DIMENSION_NONE = 0;\nconst DIMENSION_RANK = 1;\nconst DIMENSION_RARITY = 2;\nconst DIMENSION_LEVEL = 3;\nconst DIMENSION_SLOT = 4; // for artifacts\nconst DIMENSION_AFFINITY = 4; // for champions\nconst DIMENSION_SETKIND = 5; // for artifacts\nconst DIMENSION_MARKER = 5; // for champions\nconst DIMENSION_FACTION = 6;\nconst DIMENSION_MAIN_STAT = 7;\n\nclass Comparer {\n    constructor() {\n        setOrdinalities = {};\n        var count = 0;\n        artifactSetsConfig.sets.forEach((setConfig) => {\n            if (setConfig.key)\n                setOrdinalities[setConfig.key.toLowerCase()] = setConfig.ordinality;\n            if (setConfig.jsonKey)\n                setOrdinalities[setConfig.jsonKey.toLowerCase()] = setConfig.ordinality;\n            count++;\n        });\n        // handle 'None' specially:\n        setOrdinalities[\"none\"] = count + 1;\n        // make the champion sorters - by using lambdas, the functions\n        // can refer to member variables.\n        var championSorters = {};\n        championSorters[DIMENSION_NONE] = (c1, c2) => this.Champions(c1, c2);\n        championSorters[DIMENSION_RANK] = (c1, c2) => this.ChampionsByRank(c1, c2);\n        championSorters[DIMENSION_RARITY] = (c1, c2) => this.ChampionsByRarity(c1, c2);\n        championSorters[DIMENSION_LEVEL] = (c1, c2) => this.ChampionsByLevel(c1, c2);\n        championSorters[DIMENSION_AFFINITY] = (c1, c2) => this.ChampionsByAffinity(c1, c2);\n        championSorters[DIMENSION_MARKER] = (c1, c2) => this.ChampionsByMarker(c1, c2);\n        championSorters[DIMENSION_FACTION] = (c1, c2) => this.ChampionsByFaction(c1, c2);\n        this.championSorters = championSorters;\n        this.artifactSorters = this.makeArtifactSorters();\n        this.numberer = new Numberer();\n        // map from faction key to ordinality\n        var factionOrdinalities = {};\n        factionConfig.factions.forEach((factionSpec) => {\n            factionOrdinalities[factionSpec.key.toLowerCase()] = factionSpec.ordinality;\n\n        });\n        this.factionOrdinalities = factionOrdinalities;\n    }\n    makeArtifactSorters() {\n        var artifactSorters = {};\n        artifactSorters[DIMENSION_RANK] = this.ArtifactByRank.bind(this);\n        artifactSorters[DIMENSION_LEVEL] = this.ArtifactByLevel.bind(this);\n        artifactSorters[DIMENSION_FACTION] = this.ArtifactByFaction.bind(this);\n        artifactSorters[DIMENSION_RARITY] = this.ArtifactByRarity.bind(this);\n        artifactSorters[DIMENSION_SLOT] = this.ArtifactByKind.bind(this);\n        artifactSorters[DIMENSION_SETKIND] = this.ArtifactBySetKind.bind(this);\n        artifactSorters[DIMENSION_MAIN_STAT] = this.ArtifactByMainStat.bind(this);\n        return artifactSorters;\n    }\n\n    ArtifactByFaction(art1, art2) {\n        var aFaction = art1.requiredFraction ? art1.requiredFraction : \"\";\n        var bFaction = art2.requiredFraction ? art2.requiredFraction : \"\";\n        return aFaction.localeCompare(bFaction);\n    }\n\n    ArtifactByLevel(art1, art2) {\n        var v1 = (art1 && ('level' in art1)) ? art1.level : -1;\n        var v2 = (art2 && ('level' in art2)) ? art2.level : -1;\n        return v1 - v2;\n    }\n\n    ArtifactByRank(art1, art2) {\n        var numberer = new Numberer();\n        var v1 = numberer.Rank(art1.rank);\n        var v2 = numberer.Rank(art2.rank);\n        return v1 - v2;\n    }\n\n    ArtifactByRarity(art1, art2) {\n        var numberer = new Numberer();\n        var v1 = numberer.Rarity(art1.rarity);\n        var v2 = numberer.Rarity(art2.rarity);\n        return v1 - v2;\n    }\n\n    ArtifactByKind(art1, art2) {\n        var numberer = new Numberer();\n        var v1 = numberer.ArtifactKind(art1.kind);\n        var v2 = numberer.ArtifactKind(art2.kind);\n        return v1 - v2;\n    }\n\n    ArtifactBySetKind(art1, art2) {\n        var v1 = (art1 && art1.setKind) ? art1.setKind.toLowerCase() : null;\n        var v2 = (art2 && art2.setKind) ? art2.setKind.toLowerCase() : null;\n        if (!v1 && !v2) return 0;\n        if (!v1) return 1;\n        if (!v2) return -1;\n        // can't refer to 'this' here :(\n        v1 = setOrdinalities[v1];\n        v2 = setOrdinalities[v2];\n\n        return v1 - v2;\n    }\n\n    ArtifactByMainStat(art1, art2) {\n        var b1 = art1.primary || art1.primaryBonus;\n        var b2 = art2.primary || art2.primaryBonus;\n        if (!b1 && !b2) return 0;\n        if (!b1) return -1;\n        if (!b2) return 1;\n        var v1 = b1.kind;\n        var v2 = b2.kind;\n        if (!v1 && !v2) return 0;\n        if (!v1) return 1;\n        if (!v2) return 1;\n        var delta = v1.toLowerCase().localeCompare(v2.toLowerCase());\n        if (delta !== 0) {\n            return delta;\n        }\n        // bigger bonus amount wins....\n        v1 = b1.value + b1.enhancement;\n        v2 = b2.value + b2.enhancement;\n        return v1 - v2;\n    }\n\n    ArtifactsOn(a1, a2, dimension) {\n        var sorter = this.artifactSorters[dimension];\n        if (!sorter) {\n            return this.ArtifactByMainStat(a1, a2);\n        } else {\n            return sorter(a1, a2);\n        }\n    }\n\n    ChampionsOn(c1, c2, dimension) {\n        var sorter = this.championSorters[dimension];\n        if (!sorter) {\n            return this.Champions(c1, c2);\n        }\n        return sorter(c1, c2);\n    }\n\n    Champions(c1, c2) {\n        // sorting on id works, but is non-intuitive.\n        // instead use name.\n        var aName = (c1 && c1.name) ? c1.name : \"\";\n        var bName = (c2 && c2.name) ? c2.name : \"\";\n        return aName.localeCompare(bName);\n    }\n\n    Marker(m1, m2) {\n        if (!m1 && !m2) return 0;\n        if (!m1 || m1 === \"None\") return 1;\n        if (!m2 || m2 === \"None\") return -1;\n        return m1.toLowerCase().localeCompare(m2.toLowerCase());\n    }\n    ChampionsByRank(c1, c2) {\n        var numberer = this.numberer;\n        var v1 = numberer.RankFromStars(c1.grade);\n        var v2 = numberer.RankFromStars(c2.grade);\n        return v1 - v2;\n    }\n    ChampionsByRarity(c1, c2) {\n        var numberer = this.numberer;\n        var v1 = numberer.Rarity(c1.rarity);\n        var v2 = numberer.Rarity(c2.rarity);\n        return v1 - v2;\n    }\n    ChampionsByLevel(c1, c2) {\n        var v1 = c1.level;\n        var v2 = c2.level;\n        return v1 - v2;\n    }\n    ChampionsByAffinity(c1, c2) {\n        var v1 = c1.element;\n        var v2 = c2.element;\n        return v1.localeCompare(v2);\n    }\n    ChampionsByMarker(c1, c2) {\n        var v1 = c1.marker;\n        var v2 = c2.marker;\n        return this.Marker(v1, v2);\n    }\n    ChampionsByFaction(c1, c2) {\n        var v1 = (c1.fraction || c1.faction).toLowerCase();\n        v1 = (v1 in this.factionOrdinalities) ? this.factionOrdinalities[v1] : v1;\n        var v2 = (c2.fraction || c2.faction).toLowerCase();\n        v2 = (v2 in this.factionOrdinalities) ? this.factionOrdinalities[v2] : v2;\n        return v1 - v2;\n    }\n}\n\nexport default Comparer;\n","import React from 'react';\nimport { Table } from 'antd';\nimport Comparer from './Comparer';\nimport Numberer from './Numberer';\nimport Formatter from './Formatter';\n\nclass ArtifactPage extends React.Component {\n  render() {\n    if (!this.props.artifacts || this.props.artifacts.length === 0) {\n      return (<div><span>No artifacts to show</span></div>);\n    }\n    var numberer = new Numberer();\n    var formatter = new Formatter();\n    var comparer = new Comparer();\n    const columns = [\n      {\n        title: 'Rank',\n        dataIndex: 'rank',\n        key: 'rank',\n        sorter: (a, b) => comparer.ArtifactByRank(a, b),\n      },\n      {\n        title: 'Rarity',\n        dataIndex: 'rarity',\n        key: 'rarity',\n        sorter: (a, b) => comparer.ArtifactByRarity(a, b),\n      },\n      {\n        title: 'Kind',\n        dataIndex: 'kind',\n        key: 'kind',\n        sorter: (a, b) => comparer.ArtifactByKind(a, b)\n      },\n      {\n        title: 'Set',\n        dataIndex: 'setKind',\n        key: 'setKind',\n        sorter: (a, b) => comparer.ArtifactBySetKind(a, b)\n      },\n      {\n        title: 'Level',\n        dataIndex: 'level',\n        key: 'level',\n      },\n      {\n        title: 'Main Stat',\n        dataIndex: 'primary',\n        key: 'primary',\n        render: (stats, record, index) => (\n          <div>{formatter.Stat(stats, 0)}</div>\n        )\n      },\n      {\n        title: 'SubStats',\n        dataIndex: 'subStats',\n        key: 'subStats',\n        render: (subStats, record, index) => (\n          <div>{formatter.Substats(subStats)}</div>\n        )\n      },\n      {\n        title: 'Faction',\n        dataIndex: 'requiredFraction',\n        key: 'faction',\n        render: (factionKey) => formatter.Faction(factionKey),\n        sorter: (a, b) => {\n          var aFaction = a.requiredFraction ? a.requiredFraction : \"\";\n          var bFaction = b.requiredFraction ? b.requiredFraction : \"\";\n          return aFaction.localeCompare(bFaction);\n        }\n      },\n      {\n        title: 'Wearer',\n        dataIndex: 'wearer',\n        key: 'wearer',\n        render: (champion) => (champion && champion.name) ? champion.name : '',\n        sorter: (a, b) => {\n          return comparer.Champions(a.wearer, b.wearer);\n        }\n      }\n\n    ];\n    const dataByRows = [\n    ];\n\n    this.props.artifacts.forEach((artifact) => {\n      var rowData = {\n        key: artifact.id,\n        rank: numberer.Rank(artifact.rank),\n        rarity: artifact.rarity,\n        kind: artifact.kind,\n        setKind: artifact.setKind,\n        level: artifact.level,\n        requiredFraction: artifact.requiredFraction,\n        primary: artifact.primaryBonus,\n        subStats: artifact.secondaryBonuses,\n        wearer: artifact.wearer\n\n      };\n      if (artifact.isSeen) {\n        dataByRows.push(rowData);\n      }\n\n    });\n    const paginationConfig = false;\n    return (\n      <div className=\"runed_rows\">\n        <h3>There are {dataByRows.length} artifacts.</h3>\n        <Table pagination={paginationConfig} dataSource={dataByRows} columns={columns} />\n      </div>\n    );\n  }\n}\n\nexport default ArtifactPage;","import React from 'react';\nimport Formatter from './Formatter';\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\n/**\n * a single widget letting you choose a particular dimension of\n * an artifact to sort on.\n * \n * props: \n *   initialValue - the initial value\n *   reporter - called on a new value\n *   labels - optional, if specified gives the labels.\n */\nclass ArtifactDimensionChooser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatter = new Formatter();\n    this.defaultLabels = [\n      \"None\",\n      \"Rank\",\n      \"Rarity\",\n      \"Level\",\n      \"Slot\",\n      \"Set\",\n      \"Faction\",\n      \"Primary Stat\"\n    ]\n  }\n\n  onSelect(value) {\n    if (this.props.reporter) {\n      this.props.reporter(value);\n    }\n    return false;\n  }\n  render() {\n    var options = [];\n    var labels = this.props.labels;\n    if (!labels) {\n      labels = this.defaultLabels;\n    }\n    labels.forEach((label, index) => {\n      options.push(<Option key={index} value={index}>{label}</Option>);\n    });\n    // stop propagation to keep clicking from changing the sort order.\n    return (\n      <span>\n        Sort on:&nbsp;\n        <Select onClick={(e) => {\n          e.stopPropagation();\n        }} value={this.props.initialValue} style={{ width: 150 }} onSelect={(value) => this.onSelect(value)}>\n          {options}\n        </Select>\n      </span>\n    )\n  }\n}\n\nexport default ArtifactDimensionChooser;","import React from 'react';\nimport Formatter from './Formatter';\nimport artifactSetsConfig from './config/artifact_sets.json';\nimport artifactTypeConfig from './config/artifact_types.json';\nimport factionConfig from './config/factions.json';\nimport Numberer from './Numberer';\n\n/**\n * 'Rune' showing an artifact\n * props:\n *   artifact: the artifact to render\n */\nclass ArtifactRune extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatter = new Formatter();\n    this.numberer = new Numberer();\n    // keep a map from artifact type to data\n    this.artifactTypeMap = {};\n    artifactTypeConfig.artifact_types.forEach((typeSpec) => {\n      this.artifactTypeMap[typeSpec.key.toLowerCase()] = typeSpec;\n    });\n    // and from set type to set spec\n    this.setSpecMap = {};\n    artifactSetsConfig.sets.forEach((setSpec) => {\n      if (setSpec.jsonKey) this.setSpecMap[setSpec.jsonKey] = setSpec;\n      if (setSpec.key) this.setSpecMap[setSpec.key] = setSpec;\n    });\n    // and from faction key to faction spec\n    this.factionSpecMap = {};\n    factionConfig.factions.forEach((factionSpec) => {\n      this.factionSpecMap[factionSpec.key] = factionSpec;\n    });\n\n  }\n  render() {\n    var artifact = this.props.artifact;\n    var typeSpec = this.artifactTypeMap[artifact.kind.toLowerCase()];\n    // the type and the rarity can go together in the image:\n    var msg = artifact.rarity + \" \" + typeSpec.label;\n    const UNICODE_STAR = \"\\u2605\";\n    var starsText = this.numberer.Rank(artifact.rank) + UNICODE_STAR;\n    const STAR_IMAGE_SRC = \"https://github.com/PatPat1567/RaidShadowLegendsData/blob/master/images/Misc/regular_star.png?raw=true\";\n    var starsImg = [<span key=\"0\">{this.numberer.Rank(artifact.rank)}</span>, <img key=\"1\" className=\"artifact_star\" src={STAR_IMAGE_SRC} alt={starsText} title={starsText} />];\n    msg = starsText + \" \" + msg;\n    // then a container div wrapping the image and stuff atop it\n    var containerDiv;\n    // the base image\n    var baseImg = this.formatter.Image(typeSpec.icon, msg, { \"className\": \"artifact_icon\", \"rarity\": artifact.rarity });\n    // the 'meatball' denoting the artifact set.\n    var meatball = null;\n    if (artifact.setKind && artifact.setKind !== \"None\") {\n      var spec = this.setSpecMap[artifact.setKind];\n      if (spec === null) {\n        //console.log('no spec for kind ' + artifact.setKind);\n      }\n      if (spec != null) {\n        msg = msg + \" of \" + spec.label;\n        if (spec.piece_icon_base) { // there is an icon for this piece, including the 'meatball' (the armor set)\n          baseImg = <img src={spec.piece_icon_base + typeSpec.label + \".png\"}\n            alt={msg} title={msg} className=\"artifact_icon\" rarity={artifact.rarity} />\n        } else {\n          baseImg = this.formatter.Image(typeSpec.icon, msg, { \"className\": \"artifact_icon\", \"rarity\": artifact.rarity });\n          meatball = this.formatter.Image(\"/pix/armor_sets/\" + spec.icon, spec.label,\n            { \"className\": \"floats_above meatball\" });\n        }\n      }\n    }\n    // if it's an accessory, perhaps over-ride:\n    if (artifact.setKind === \"None\" && artifact.requiredFraction) {\n      // we need a prefix and a suffix.\n      var factionSpec = this.factionSpecMap[artifact.requiredFraction];\n      var prefix = factionSpec ? factionSpec.accessory_prefix : null;\n      var suffix = typeSpec ? typeSpec.faction_icon_suffix : null;\n      if (factionSpec.label) {\n        msg = msg + \" (\" + factionSpec.label + \")\";\n      }\n      if (prefix && suffix) {\n        baseImg = <img src={prefix + suffix + \".png\"}\n          alt={msg} title={msg} className=\"artifact_icon\" rarity={artifact.rarity} />\n      }\n    }\n    var levelText = artifact.level ? (\"+\" + artifact.level) : \"\";\n    var level = <div className=\"floats_above level_overlay\">{levelText}</div>\n    var stars = <div className=\"floats_above stars_overlay\">{starsImg}</div>\n    containerDiv = <div className=\"container\">\n      {baseImg}\n      {stars}\n      {level}\n      {meatball}\n    </div>\n    var toRight = artifact.primaryBonus ? (<div className=\"primary\">{this.formatter.Bonus(artifact.primaryBonus, 0)}</div>)\n      : <div className=\"primary\" />;\n    return <div className=\"artifact_rune\">\n      {containerDiv}\n      {toRight}\n    </div>\n  }\n}\n\nexport default ArtifactRune;","import React from 'react';\nimport Formatter from './Formatter';\nimport markersConfig from './config/markers.json';\n\n/**\n * Shows the 'rune' for a champion marker.\n * \n * props:\n * marker - text key\n * moreClassName - add to the class name, if specified.\n */\nclass MarkerRune extends React.Component {\n  constructor(props) {\n    super(props);\n    // map from key to spec.\n    var keyToSpec = {};\n    markersConfig.markers.forEach((markerSpec) => {\n      keyToSpec[markerSpec.key.toLowerCase()] = markerSpec;\n\n    });\n    this.state = {\n      'keyToSpec': keyToSpec\n    }\n\n  }\n  render() {\n    var key = this.props.marker;\n    if (!key) return null;\n    key = key.toLowerCase();\n    if (key === \"none\") return null;\n    var spec = this.state.keyToSpec[key];\n    if (!spec) return null;\n    var formatter = new Formatter();\n    var className = \"marker_icon\";\n    if (this.props.moreClassName) {\n      className = className + \" \" + this.props.moreClassName;\n    }\n    return formatter.Image(spec.icon, spec.label, { \"className\": className });\n  }\n}\n\nexport default MarkerRune;","import React from 'react';\nimport Formatter from './Formatter';\nimport MarkerRune from './MarkerRune';\nimport factionConfig from './config/factions.json';\nimport greatHallConfig from './config/great_hall.json';\nimport raritiesConfig from './config/rarities.json';\nimport Numberer from './Numberer';\n\n/**\n * Shows the 'rune' for a champion (image + title)\n * In the future, can be 'decorated' with affinity, stars, level, etc.\n * \n * props:\n * champion\n */\nclass ChampionRune extends React.Component {\n  constructor(props) {\n    super(props);\n    // cache the mapping from affinity to info.\n    // this is stored in the 'rows' attribute of the great hall config\n    this.affinityToSpec = {};\n    greatHallConfig.rows.forEach((rowSpec) => {\n      this.affinityToSpec[rowSpec.key] = rowSpec;\n      this.affinityToSpec[rowSpec.key.toLowerCase()] = rowSpec;\n    });\n    // and from faction key to faction spec\n    this.factionSpecMap = {};\n    factionConfig.factions.forEach((factionSpec) => {\n      this.factionSpecMap[factionSpec.key] = factionSpec;\n    });\n    this.rarityMap = {};\n    raritiesConfig.rarities.forEach((spec) => {\n      this.rarityMap[spec.key] = spec;\n    });\n  }\n  twoDigits(level) {\n    if (!level) return level;\n    if (level < 10) return \" \" + level;\n    return level;\n\n  }\n\n  maybeRarity(rarity, label) {\n    if (!rarity || !this.rarityMap[rarity.toLowerCase()]) return null;\n    var spec = this.rarityMap[rarity.toLowerCase()];\n    if (!spec || !spec.surround) return null;\n    return (\n      <img className=\"floats_above surround\" src={spec.surround} label={label} alt={label} />\n    )\n\n  }\n\n  maybeMarker(marker, label) {\n    if (!marker || marker.toLowerCase() === \"none\") return null;\n    return <MarkerRune marker={marker} moreClassName=\"floats_above\" />\n  }\n\n  maybeVault(inStorage, label) {\n    if (!inStorage) return null;\n    var formatter = new Formatter();\n    return formatter.Image(\"/pix/misc/vault.png\", label, { 'className': 'floats_above vault_icon' });\n  }\n\n  onError(evt, tryNum, imgUrl) {\n    //console.log(\"tryNum = \" + tryNum);\n    // don't infinite loop.\n    // 0 --> 1 replace https with http\n    // 1 --> 2, try 'unknown' image.\n    // after 1, stop\n    switch (tryNum) {\n      case 0:\n        var newUrl = imgUrl.replace(\"https\", \"http\");\n        if (newUrl !== imgUrl) {\n          evt.target.src = newUrl;\n        }\n        break;\n      case 1:\n        evt.target.src = \"https://raw.githubusercontent.com/raidchamps/static-data/main/images/avatar/1default/image.png\";\n        break;\n      default:\n        break;\n    }\n    return tryNum + 1;\n  }\n\n  render() {\n    const UNICODE_STAR = \"\\u2605\";\n    var champion = this.props.champion;\n    var formatter = new Formatter();\n    var numberer = new Numberer();\n    if (!champion || !champion.name) return null;\n    // the affinity\n    var affinitySpec = this.affinityToSpec[(champion.element || \"\").toLowerCase()]\n    var label = champion.name + \": \" + champion.rarity;\n    var stars = numberer.RankFromStars(champion.grade || \"\");\n    var starTxt = stars + UNICODE_STAR;\n    label += \" \" + starTxt;\n\n    label += \" level \" + champion.level;\n    label += \" \" + affinitySpec.label;\n    var faction = this.factionSpecMap[champion.fraction];\n    if (faction) {\n      label += \" \" + faction.label;\n    }\n    label += \" champion\";\n    var inStorage = ('inStorage' in champion) ? champion.inStorage : false;\n    if (inStorage) {\n      label += \" (vault)\"\n    }\n    //var imgName = champion.name.replace(/ /g, \"_\");\n    //var imgUrl = \"https://raw.githubusercontent.com/PatPat1567/RaidShadowLegendsData/master/images/avatar/\" + imgName + \".png\";\n    //var imgName = champion.name.replace(/ /g, \"-\").toLowerCase();\n    //var imgUrl = \"https://raw.githubusercontent.com/raidchamps/static-data/main/images/avatar/\" + imgName + \"/image.png\";\n    //var tryNum = 0;\n    var folderName = champion.name.replace(/ /g, \"-\").toLowerCase();\n\n    //var imgUrl = \"https://raw.githubusercontent.com/PatPat1567/RaidShadowLegendsData/master/images/avatar/\" + imgName + \".png\";\n    var imgUrl = \"https://raw.githubusercontent.com/raidchamps/static-data/main/images/avatar/\" + folderName + \"/image.png\";\n    var unknownUrl = \"https://raw.githubusercontent.com/raidchamps/static-data/main/images/avatar/1default/image.png\";\n\n    //       <img className=\"floats_above champion_avatar_small\" rarity={champion.rarity} alt={label} title={label} src={imgUrl}\n    // onError={(e) => tryNum = this.onError(e, tryNum, imgUrl)} />\n    return (<div className=\"container\">\n      {this.maybeRarity(champion.rarity, label)}\n      <picture className=\"floats_above champion_avatar_small\" rarity={champion.rarity} alt={label} title={label}>\n        <source srcSet={imgUrl} />\n        <img src={unknownUrl} className=\"floats_above champion_avatar_small\"\n          alt={\"picture of \" + champion.name} />\n      </picture>\n      <div className=\"floats_above champion_stars_overlay\">{starTxt}</div>\n      {faction ? formatter.Image(faction.icon, label, { 'className': 'floats_above champion_faction_overlay' }) : null}\n      {this.maybeMarker(champion.marker, label)}\n      {formatter.Image(affinitySpec.icon, label,\n        { 'className': 'floats_above champion_affinity_overlay' })}\n      {this.maybeVault(inStorage, label)}\n      <div className=\"floats_above champion_level_overlay\"><span>{this.twoDigits(champion.level)}</span></div>\n\n    </div>);\n\n  }\n}\n\nexport default ChampionRune;","import React from 'react';\nimport { Table } from 'antd';\nimport Comparer from './Comparer';\nimport Numberer from './Numberer';\nimport Formatter from './Formatter';\nimport ArtifactDimensionChooser from './ArtifactDimensionChooser';\nimport ArtifactRune from './ArtifactRune';\nimport ChampionRune from './ChampionRune';\n\nimport {\n  DIMENSION_NONE,\n} from './Comparer';\n\nclass ArtifactBumpPage extends React.Component {\n  constructor(props) {\n    super(props);\n    // the VP gains. 2D array\n    // 1st D: the index is the (number of stars) -1.\n    // 2nd D: the index is the (new level / 4) - 1.\n    var vpGains = [\n      [1, 2, 3, 20], // 1 star\n      [1, 2, 4, 80], // 2 star\n      [1, 3, 15, 165], // 3 star\n      [1, 3, 30, 215], // 4 star\n      [2, 5, 40, 270], // 5 star\n      [3, 10, 65, 340] // 6 star\n    ];\n    var comparer = new Comparer();\n    this.state = {\n      'vpGains': vpGains,\n      artifactDimension: DIMENSION_NONE,\n      'numberer': new Numberer(),\n      'comparer': comparer\n    }\n\n  }\n\n  onDimensionChange(newDimension) {\n    if (newDimension === this.state.artifactDimension) {\n      return;\n    }\n    this.setState({ artifactDimension: newDimension });\n  }\n\n  victoryPointsFor(rank, level) {\n    //console.log('rank = ' + rank + ', level = ' + level);\n    var row = this.state.vpGains[rank - 1];\n    var nextLevel = (level + 3) >> 2;\n    var vp = row[nextLevel - 1];\n    return vp;\n  }\n  compareArtifacts(art1, art2) {\n    if (!art1 && !art2) return 0;\n    if (!art1) return 1;\n    if (!art2) return -1;\n    var dimension = this.state.artifactDimension;\n    return this.state.comparer.ArtifactsOn(art1, art2, dimension);\n  }\n\n  render() {\n    if (!this.props.artifacts || this.props.artifacts.length === 0) {\n      return (<div><span>No artifacts to show</span></div>);\n    }\n    var numberer = new Numberer();\n    var formatter = new Formatter();\n    var runeHeader = <ArtifactDimensionChooser initialValue={this.state.artifactDimension}\n      reporter={(value) => this.onDimensionChange(value)} />;\n    const columns = [\n      {\n        title: runeHeader,\n        dataIndex: 'artifact',\n        key: 'artifact',\n        sorter: (a, b) => this.compareArtifacts(a.artifact, b.artifact),\n        render: (artifact) => {\n          return <ArtifactRune artifact={artifact} />;\n        },\n      },\n      {\n        title: 'SubStats',\n        dataIndex: 'subStats',\n        key: 'subStats',\n        render: (subStats) => (\n          <div>{formatter.Substats(subStats)}</div>\n        )\n      },\n      {\n        title: 'Wearer',\n        dataIndex: 'wearer',\n        key: 'wearer',\n        render: (champion) => {\n          return <ChampionRune champion={champion} />\n        },\n        sorter: (a, b) => {\n          return this.state.comparer.Champions(a.wearer, b.wearer);\n        }\n      }\n\n    ];\n    const dataByRows = [\n    ];\n    var vpGain = 0;\n\n    this.props.artifacts.forEach((artifact) => {\n      if (artifact.isSeen) {\n        if ((artifact.level % 4) !== 0) {\n          var rowData = {\n            key: artifact.id,\n            subStats: artifact.secondaryBonuses,\n            wearer: artifact.wearer,\n            artifact: artifact\n          };\n          vpGain += this.victoryPointsFor(numberer.Rank(artifact.rank), artifact.level);\n          dataByRows.push(rowData);\n        }\n      }\n\n    });\n    const paginationConfig = false;\n    return (\n      <div className=\"runed_rows\">\n        <h3>There are {dataByRows.length} artifacts to bump.</h3>\n        <p>You could gain <b>{vpGain}</b> VPs if you bump them all.</p>\n        <Table pagination={paginationConfig} dataSource={dataByRows} columns={columns} />\n      </div>\n    );\n  }\n}\n\nexport default ArtifactBumpPage;","import React from 'react';\nimport { Button, Select } from 'antd';\n\nconst { Option } = Select;\n\n/**\n * Lets the user specify a 'bar' that things should be <= or >= to.\n * \n * props:\n * intro - text to put to the left of the widget.\n * initial - initial value.\n * is_lower_bound - is this a lower bound?\n * is_exact. if true, then the <=/>= isn't shown.\n * keys - the keys for the options.\n * labels - maps from key to label to show\n * reporter - F(new value, new is_lower), called when value changes.\n */\n\n\nclass BarSpecifier extends React.Component {\n    onSelect(value) {\n        if (this.props.reporter) {\n            this.props.reporter(value, this.props.is_lower_bound);\n        }\n    }\n\n    onChangeBound() {\n        if (this.props.reporter) {\n            this.props.reporter(this.props.initial, !this.props.is_lower_bound);\n        }\n    }\n\n    renderComparator() {\n        //console.log('is_exact = ' + this.props.is_exact);\n        if (this.props.is_exact) {\n            return \": \";\n        } else {\n            var ch = String.fromCharCode(this.props.is_lower_bound ? 8805 : 8804);\n            // >= and <=, respectively\n            return (<Button className=\"is_lower_bound\" type=\"text\"\n                onClick={(e) => {\n                    e.stopPropagation();\n                    this.onChangeBound();\n                }}>\n                {ch}\n            </Button>)\n        }\n    }\n    render() {\n        var options = [];\n        this.props.keys.forEach((key) => {\n            options.push(<Option key={key} value={key}>{this.props.labels[key]}</Option>);\n        })\n\n        // stop propagation to keep clicking from changing the sort order.\n        //var initialAsNum = parseInt(this.props.initial);\n\n        var initial = this.props.initial;\n        //console.log('bar: initial = ', initial);\n\n\n        return (\n            <div style={{ display: 'inline-block', height: '1.75em' }}>\n                <span>\n                    {this.props.intro}\n                </span>\n                {this.renderComparator()}\n                <Select className=\"bar_specifier\" onClick={(e) => {\n                    e.stopPropagation();\n                }} value={initial} onSelect={(value) => this.onSelect(value)}>\n                    {options}\n                </Select>\n            </div>\n        )\n    }\n}\n\nexport default BarSpecifier;","import React from 'react';\nimport { Slider } from 'antd';\n\n\n/**\n * Lets the user specify a 'Range' of values.\n * A thin wrapper around the ant 'slider'.\n * \n * props:\n * intro - text to put to the left of the widget.\n * opts - a dictionary, expanded into properties for the\n * widget as per https://ant.design/components/slider/\n * reporter - F([new_min, new_max]), called when value changes.\n */\n\n\nclass RangeSpecifier extends React.Component {\n    onChange(value) {\n        //console.log('rangeSpecifier', value);\n        if (this.props.reporter) {\n            this.props.reporter(value);\n        }\n    }\n\n    render() {\n        var options = this.props.opts ? this.props.opts : {};\n        return (\n            <div style={{ display: 'inline-block', height: '1.75em' }}>\n                <span>\n                    {this.props.intro}\n                </span>\n                <Slider className=\"range_specifier\" onChange={(v) => {\n                    this.onChange(v)\n                }} range\n                    {...options} />\n            </div>\n        )\n    }\n}\n\nexport default RangeSpecifier;","import React from 'react';\nimport { Col, Row, Switch, Table, Tooltip } from 'antd';\nimport Comparer from './Comparer';\nimport Numberer from './Numberer';\nimport Formatter from './Formatter';\nimport ArtifactDimensionChooser from './ArtifactDimensionChooser';\nimport ArtifactRune from './ArtifactRune';\nimport artifactTypesConfig from './config/artifact_types.json';\nimport ChampionRune from './ChampionRune';\nimport BarSpecifier from './BarSpecifier';\nimport RangeSpecifier from './RangeSpecifier';\nimport substatsConfig from './config/substats.json';\n\nimport {\n  DIMENSION_NONE,\n} from './Comparer';\n\n\nconst DONT_DISPLAY = \"Uninteresting\";\nconst MAX_TO_SHOW = 500;\nconst RANK_INTRO = \"Ranks: \";\nconst SLOT_INTRO = \"Slot\"\nconst WORN_INTRO = \"Worn\";\nconst WORN_KEYS = [\"no\", \"yes\"];\nconst WORN_LABELS = { \"no\": \"No\", \"yes\": \"Yes\" };\nconst WORN_INITIAL = \"no\";\n\nconst SUBSTAT_INTRO = \"has Substat\";\n\nconst ROLLS_INITIAL = \"1\";\n\nclass ArtifactSellPage extends React.Component {\n  constructor(props) {\n    super(props);\n    var slotLabels = {};\n    var slotKeys = [];\n    artifactTypesConfig.artifact_types.forEach((typeConfig) => {\n      slotKeys.push(typeConfig.key.toLowerCase());\n      slotLabels[typeConfig.key] = typeConfig.label;\n    });\n\n    var substatLabels = {};\n    var substatKeys = [];\n    var substatsByKey = {};\n    substatsConfig.substats.forEach((substatConfig) => {\n      var key = substatConfig.key.toLowerCase();\n      substatKeys.push(key);\n      substatLabels[key] = substatConfig.label;\n      substatsByKey[key] = substatConfig;\n    });\n\n    // all the checkers for what to sell.\n    // a checker is a function that takes an artifact JSON blob,\n    // and returns null/empty string if the artifact isn't recommended for sale by this checker,\n    // a 'why' string if it is.\n    var checkers = [];\n    var id = 0;\n    // make the marks for ranks\n    const MIN_RANK = 1;\n    const MAX_RANK = 6;\n    var marks = {};\n    for (let i = MIN_RANK; i <= MAX_RANK; i++) {\n      marks[i] = \"\" + i;\n    }\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_range: true,\n        intro: RANK_INTRO,\n        reporter: (v) => this.onRankRangeChange(v),\n        dynamic: () => { return { 'value': this.state.rankRange } },\n        opts: {\n          defaultValue: [MIN_RANK, MAX_RANK],\n          min: MIN_RANK,\n          max: MAX_RANK,\n          step: 1,\n          marks: marks\n        }\n      }),\n      fn: this.CheckByRankRange,\n    });\n\n    const MIN_RARITY = 0;\n    const MAX_RARITY = 4;\n    const RARITY_LABELS = [\"Common\", \"Uncommon\", \"Rare\", \"Epic\", \"Legendary\"]\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_range: true,\n        intro: \"Rarities: \",\n        reporter: (v) => this.onRarityRangeChange(v),\n        dynamic: () => { return { 'value': this.state.rarityRange } },\n        opts: {\n          defaultValue: [MIN_RARITY, MAX_RARITY],\n          min: MIN_RARITY,\n          max: MAX_RARITY,\n          step: 1,\n          //marks: marks,\n          tipFormatter: (v) => { return <span style={{ 'font-size': 'smaller' }}>{RARITY_LABELS[v]}</span> },\n          tooltipVisible: true\n        }\n      }),\n      fn: this.CheckByRarityRange,\n    });\n    const MIN_LEVEL = 1;\n    const MAX_LEVEL = 16;\n    marks = {};\n    for (let i = MIN_LEVEL; i <= MAX_LEVEL; i++) {\n      // only mark some, gets too cluttered otherwise.\n      if ((i % 4) === 0)\n        marks[i] = \"\" + i;\n    }\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_range: true,\n        intro: \"Levels: \",\n        reporter: (v) => this.onLevelRangeChange(v),\n        opts: {\n          defaultValue: [MIN_LEVEL, MAX_LEVEL],\n          min: MIN_LEVEL,\n          max: MAX_LEVEL,\n          step: 1,\n          marks: marks\n        },\n        dynamic: () => { return { 'value': this.state.levelRange } },\n      }),\n      fn: this.CheckByLevelRange,\n    });\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        intro: SLOT_INTRO,\n        is_exact: true,\n        reporter: (v, b) => this.onSlotBarChange(v, b),\n        keys: slotKeys,\n        labels: slotLabels,\n        dynamic: () => { return { 'initial': this.state.slotBar } },\n      }),\n      fn: this.CheckBySlot,\n    });\n    var substatCheckerId = id;\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        intro: SUBSTAT_INTRO,\n        is_exact: true,\n        reporter: (v, b) => this.onSubstatBarChange(v, b),\n        keys: substatKeys,\n        labels: substatLabels,\n        dynamic: () => { return { 'initial': this.state.substatBar } },\n      }),\n      fn: this.CheckBySubstat,\n    });\n    const MIN_ROLL = 0;\n    const MAX_ROLL = 4;\n    marks = {};\n    for (let i = MIN_ROLL; i <= MAX_ROLL; i++) {\n      marks[i] = \"\" + i;\n    }\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_range: true,\n        intro: \"Rolls: \",\n        reporter: (v) => this.onRollRangeChange(v),\n        dynamic: () => { return { 'value': this.state.rollRange } },\n        opts: {\n          defaultValue: [MIN_ROLL, MAX_ROLL],\n          min: MIN_ROLL,\n          max: MAX_ROLL,\n          step: 1,\n          marks: marks\n        }\n      }),\n      fn: this.CheckByRollRange,\n    });\n\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_exact: true,\n        reporter: ((v, b) => this.onWornBarChange(v, b)),\n        intro: WORN_INTRO,\n        keys: WORN_KEYS,\n        labels: WORN_LABELS,\n        dynamic: () => { return { 'initial': this.state.wornBar } }\n      }),\n      fn: this.CheckWorn\n    });\n    checkers.push({ id: id++, labelInfo: this.makeLabelInfo(\"Attack Amulets\"), fn: this.CheckAttackAmulets });\n    checkers.push({\n      id: id++, labelInfo: this.makeLabelInfo(\"Defense Rings w/o 2 good substats\"), fn: this.CheckDefenseRingWithoutTwoGoodSubstats,\n      ttip: \"Ring of Defense without 2 substats that are either % boost, or Spd\"\n    });\n    checkers.push({\n      id: id++, labelInfo: this.makeLabelInfo(\"Defensive Rings w/o Defensive substat\"), fn: this.CheckDefensiveRingWithoutDefensiveSubstats,\n      ttip: \"Ring of DEF or HP with no substat of HP%, DEF%, or Speed\"\n    });\n    checkers.push({\n      id: id++, labelInfo: this.makeLabelInfo(\"Non-Lego ring w/2 bad substats\"), fn: this.CheckNonLegoRingWith2BadSubstats,\n      ttip: \"Non-Legendary ring with 2 substats that are flat and not Speed\"\n    });\n    checkers.push({\n      id: id++, labelInfo: this.makeLabelInfo(\"top row w/2 bad substats\"), fn: this.CheckTopRowWith2BadSubstats,\n      ttip: \"A 'bad' substat is flat ATK,DEF,RES, or HP\"\n    });\n\n    checkers.push({ id: id++, labelInfo: this.makeLabelInfo(\"Atk% Gloves\"), fn: this.CheckAtkPercentGloves });\n    checkers.push({\n      id: id++, labelInfo: this.makeLabelInfo(\"CD Gloves w/o CR or SPD\"), fn: this.CheckMostCDGloves,\n      ttip: \"Crit Damage gloves without either a Crit Rate or Speed substat\"\n    });\n    checkers.push({ id: id++, labelInfo: this.makeLabelInfo(\"Non-Lego Non-Speed Boots\"), fn: this.CheckNonLegoNonSpeedBoots });\n    checkers.push({ id: id++, labelInfo: this.makeLabelInfo(\"Defensive Boots Without SPD substat\"), fn: this.CheckDefensiveBootsWithoutSpeed });\n    checkers.push({ id: id++, labelInfo: this.makeLabelInfo(\"> 2 substats, none SPD\"), fn: this.CheckThreeSubstatsNoSpeed });\n\n\n    checkers.push({ id: id++, labelInfo: this.makeLabelInfo(\"bottom row flat HP/ATK/DEF\"), fn: this.CheckBottomRowFlatMainStat });\n    // map from checkerid to whether enabled. Not an array, to be fancy:\n    var checkedByCheckerId = {};\n    checkers.forEach((checker, index) => {\n      checkedByCheckerId[checker.id] = (checker.fn === this.CheckUnwornGear);\n    });\n    var comparer = new Comparer();\n    this.state = {\n      'checkers': checkers,\n      'checkedByCheckerId': checkedByCheckerId,\n      'numberer': new Numberer(),\n      'artifactDimension': DIMENSION_NONE,\n      'comparer': comparer,\n      'rankRange': [MIN_RANK, MAX_RANK],\n      'rarityRange': [MIN_RARITY, MAX_RARITY],\n      'levelRange': [MIN_LEVEL, MAX_LEVEL],\n      'rollRange': [MIN_ROLL, MAX_ROLL],\n      slotBar: \"boots\",\n      substatBar: \"spd\",\n      wornBar: WORN_INITIAL,\n      rollBar: ROLLS_INITIAL,\n      roll_is_lower_bound: true,\n      substatsByKey: substatsByKey,\n      substatCheckerId: substatCheckerId\n    }\n  }\n\n  /**\n   * Helper proc to make the label info.\n   * If 'info' is a string, returns info for making a string label.\n   * Else, it's a dict, it's for making a 'BarSpecifier'.\n   * @param {*} info \n   */\n  makeLabelInfo(info) {\n    if (typeof (info) === \"string\") {\n      return { 'text': info };\n    } else if (\"is_range\" in info) {  // assume a BarSpecifier\n      return { 'range': info };\n    } else {\n      return { 'bar': info };\n    }\n  }\n\n  onWornBarChange(v) {\n    this.setState({\n      wornBar: v\n    });\n  }\n\n  onRankRangeChange(v) {\n    //console.log('onRankRangeChange', v);\n    this.setState({\n      rankRange: v\n    });\n  }\n\n  onRarityRangeChange(v) {\n    //console.log('onRarityRangeChange', v);\n    this.setState({\n      rarityRange: v\n    });\n  }\n\n  onLevelRangeChange(v) {\n    this.setState({\n      levelRange: v\n    });\n  }\n\n\n  onSlotBarChange(v, is_lower_bound) {\n    this.setState({\n      slotBar: v\n    });\n  }\n\n  onSubstatBarChange(v, is_lower_bound) {\n    //console.log('onSubstatBarChange:', v);\n    this.setState({\n      substatBar: v\n    });\n  }\n\n  onRollRangeChange(v) {\n    this.setState({\n      rollRange: v\n    });\n  }\n\n\n  CheckWorn(artifact, extra) {\n    if (!artifact) return null;\n    var worn = !!(artifact && artifact.wearer);\n    var bar = extra.wornBar;\n    var passes = (worn === (bar === \"yes\"));\n    return passes ? DONT_DISPLAY : null;\n  }\n\n  CheckAtkPercentGloves(artifact) {\n    if (!artifact) return null;\n    if (!artifact.kind) return null;\n    if (!(artifact.kind.toLowerCase() === \"gloves\")) return null;\n    if (!(\"attack\" === artifact.primaryBonus.kind.toLowerCase())) return null;\n    if (artifact.primaryBonus.isAbsolute) return null;\n    return \"Atk% gloves\";\n  }\n\n  CheckThreeSubstatsNoSpeed(artifact) {\n    if (!artifact) return null;\n    if (!artifact.rarity) return null;\n    if (artifact.requiredFraction) return null; // accessory\n    var main = artifact.primaryBonus;\n    if (main.kind.toLowerCase() === \"speed\") return null;\n    var secondaries = artifact.secondaryBonuses;\n    if (!secondaries || secondaries.length < 3) return null;\n    var hasInSecondary = secondaries.some((bonus) => {\n      return bonus.kind.toLowerCase() === \"speed\";\n    });\n    if (!hasInSecondary) {\n      return \"no Speed substat\";\n    }\n  }\n\n  CheckNonLegoNonSpeedBoots(artifact) {\n    if (!artifact) return null;\n    if (!artifact.rarity) return null;\n    if (artifact.requiredFraction) return null; // accessory\n    var lc = artifact.rarity.toLowerCase();\n    if (lc === \"legendary\") return null;\n    if (!artifact.kind) return null;\n    if (!(artifact.kind.toLowerCase() === \"boots\")) return null;\n    var main = artifact.primaryBonus;\n    if (main.kind.toLowerCase() === \"speed\") return null;\n    return DONT_DISPLAY;\n  }\n\n  CheckDefensiveBootsWithoutSpeed(artifact) {\n    if (!artifact) return null;\n    if (artifact.requiredFraction) return null; // accessory\n    if (!artifact.kind) return null;\n    if (!(artifact.kind.toLowerCase() === \"boots\")) return null;\n    var main = artifact.primaryBonus;\n    var mainKind = main.kind.toLowerCase();\n    if (mainKind !== \"health\" && mainKind !== \"defense\") return null;\n    var secondaries = artifact.secondaryBonuses;\n    if (!secondaries) {\n      return \"Defensive Boots with no SPD substat\";\n    }\n    var hasInSecondary = secondaries.some((bonus) => {\n      var kind = bonus.kind.toLowerCase();\n      return kind === \"speed\";\n    });\n    if (!hasInSecondary) {\n      return \"Defensive Boots with no SPD substat (\" + artifact.id + \")\";\n    }\n    return null;\n  }\n\n  CheckAttackAmulets(artifact) {\n    if (!artifact) return null;\n    if (!artifact.requiredFraction) return null; // accessory\n    if (!artifact.kind) return null;\n    if (!(artifact.kind.toLowerCase() === \"cloak\")) return null;\n    var main = artifact.primaryBonus;\n    if (main.kind.toLowerCase() !== \"attack\") return null;\n    return \"Attack Amulet\";\n  }\n\n  CheckDefenseRingWithoutTwoGoodSubstats(artifact) {\n    // a 'good' substat is a % stat, or SPD\n    if (!artifact) return null;\n    if (!artifact.requiredFraction) return null; // accessory\n    if (!artifact.kind) return null;\n    if (!(artifact.kind.toLowerCase() === \"ring\")) return null;\n    var main = artifact.primaryBonus;\n    if (main.kind.toLowerCase() !== \"defense\") return null;\n    var numGood = 0;\n    var goodNeeded = 2;\n    var secondaries = artifact.secondaryBonuses;\n    if (secondaries) {\n      secondaries.forEach((bonus) => {\n        if (!bonus.isAbsolute) numGood++;\n        var kind = ('kind' in bonus) ? bonus['kind'] : bonus['what'];\n        if (kind && (kind.toLowerCase() === \"speed\")) numGood++;\n      });\n\n    }\n    if (numGood < goodNeeded) {\n      return DONT_DISPLAY;\n    }\n    return null;\n  }\n\n  CheckDefensiveRingWithoutDefensiveSubstats(artifact) {\n    if (!artifact) return null;\n    if (!artifact.requiredFraction) return null; // accessory\n    if (!artifact.kind) return null;\n    if (!(artifact.kind.toLowerCase() === \"ring\")) return null;\n    var main = artifact.primaryBonus;\n    var kind = main.kind.toLowerCase();\n    if (kind !== \"defense\" && kind !== \"health\") return null;\n    // good substats are HP%, DEF %\n    var numGood = 0;\n    var goodNeeded = 1;\n    var secondaries = artifact.secondaryBonuses;\n    if (secondaries) {\n      secondaries.forEach((bonus) => {\n        var kind = ('kind' in bonus) ? bonus['kind'] : bonus['what'];\n        kind = kind.toLowerCase();\n        if (kind === \"speed\") numGood++;\n        if (kind === \"health\" || kind === \"defense\") {\n          if (!bonus.isAbsolute) numGood++;\n        }\n      });\n    }\n    if (numGood < goodNeeded) {\n      return DONT_DISPLAY;\n    }\n    return null;\n  }\n\n  CheckNonLegoRingWith2BadSubstats(artifact) {\n    if (!artifact) return null;\n    if (!artifact.requiredFraction) return null; // accessory\n    if (!artifact.kind) return null;\n    if (!(artifact.kind.toLowerCase() === \"ring\")) return null;\n    var lc = artifact.rarity.toLowerCase();\n    if (lc === \"legendary\") return null;\n    var numBad = 0;\n    var badNeeded = 2;\n    var secondaries = artifact.secondaryBonuses;\n    if (secondaries) {\n      secondaries.forEach((bonus) => {\n        var kind = ('kind' in bonus) ? bonus['kind'] : bonus['what'];\n        kind = kind.toLowerCase();\n        if (bonus.isAbsolute && !(kind === \"speed\")) numBad++;\n      });\n    }\n    if (numBad >= badNeeded) {\n      return DONT_DISPLAY;\n    }\n  }\n\n  CheckTopRowWith2BadSubstats(artifact) {\n    if (!artifact) return null;\n    if (artifact.requiredFraction) return null; // accessory\n    if (!artifact.kind) return null;\n    var topKinds = [\"weapon\", \"helmet\", \"shield\"];\n    var index = topKinds.indexOf(artifact.kind.toLowerCase());\n    if (index === -1) return null;\n    var badNeeded = 2;\n    var badSubs = [\"attack\", \"defense\", \"resistance\", \"health\"];\n    var secondaries = artifact.secondaryBonuses;\n    var bads = [];\n    if (secondaries) {\n      secondaries.forEach((bonus) => {\n        var kind = ('kind' in bonus) ? bonus['kind'] : bonus['what'];\n        var kindLc = kind.toLowerCase();\n        if (bonus.isAbsolute && (badSubs.indexOf(kindLc) !== -1)) {\n          bads.push(kind);\n        }\n      });\n    }\n    if (bads.length >= badNeeded) {\n      return topKinds[index] + \" has \" + bads.length + \" bad substats\"\n        + \": \" + bads.join(\", \");\n    }\n  }\n\n  CheckMostCDGloves(artifact) {\n    if (!artifact) return null;\n    if (artifact.requiredFraction) return null; // accessory\n    if (!artifact.kind) return null;\n    if (!(artifact.kind.toLowerCase() === \"gloves\")) return null;\n    var main = artifact.primaryBonus;\n    if (main.kind.toLowerCase() !== \"criticaldamage\") return null;\n    var secondaries = artifact.secondaryBonuses;\n    if (!secondaries) {\n      return \"CD gloves with no SPD or CR substat\";\n    }\n    var hasInSecondary = secondaries.some((bonus) => {\n      var kind = bonus.kind.toLowerCase();\n      return kind === \"speed\" || kind === \"criticalchance\";\n    });\n    if (!hasInSecondary) {\n      return \"CD gloves with no SPD or CR substat\";\n    }\n    return null;\n  }\n\n  CheckByRankRange(artifact, extra) {\n    if (!artifact || !artifact.rank) return null;\n    var asNum = extra.numberer.Rank(artifact.rank);\n    var bounds = extra.rankRange || [1, 6];\n    return (asNum >= bounds[0] && asNum <= bounds[1]) ? DONT_DISPLAY : null;\n  }\n\n  CheckBySlot(artifact, extra) {\n    var bar = extra.slotBar;\n    return (bar === artifact.kind.toLowerCase()) ? DONT_DISPLAY : null;\n  }\n\n  CheckBySubstat(artifact, extra) {\n    var substatKey = extra.substatBar;\n    var substats = artifact.secondaryBonuses;\n    if (!substats) return null;\n    var substatConfig = extra.substatsByKey[substatKey];\n    if (!substatConfig) return null;\n    // do they have a substat whose 'kind' is equal\n    // to substatConfig.key, and whose 'isAbsolute' matches.\n    var found = false;\n    var lc = substatConfig.attrKey.toLowerCase();\n    artifact.secondaryBonuses.some((substat) => {\n      if (substat.kind.toLowerCase() === lc\n        && substat.isAbsolute === substatConfig.isAbsolute) {\n        found = true;\n        return true;\n      }\n      return false;\n    });\n    return found ? DONT_DISPLAY : null;\n  }\n\n  CheckByRollRange(artifact, extra) {\n    if (!artifact || !artifact.secondaryBonuses) return null;\n    // a kludge. We need to look into the substat filter\n    // and find out which substat we care about. Otherwise\n    // use any substat.\n    // kludge is to look into the global state for that checker\n    // and whether it's on, and if so to what value.\n    var attrKey = null;\n    var attrIsAbsolute = null;\n    var substatCheckerId = extra.substatCheckerId;\n    if (extra.checkedByCheckerId[substatCheckerId]) {\n      // yup, it's on\n      var substatKey = extra.substatBar;\n      var substatConfig = extra.substatsByKey[substatKey];\n      attrKey = substatConfig.attrKey.toLowerCase();\n      attrIsAbsolute = substatConfig.isAbsolute;\n    }\n    var bounds = extra.rollRange;\n    // ok, now each secondary bonus (substat) must pass two\n    // tests:\n    // (1) # rolls (the 'level' field) <= or >= the 'rollBar'\n    // (2) is the substat filter is on, for that substat.\n    var whys = null;\n    artifact.secondaryBonuses.some((substat) => {\n      var passes = substat.level >= bounds[0] && substat.level <= bounds[1];\n      if (!passes) {\n        return false;\n      }\n      // check the substat type\n      if (attrKey != null) {\n        if (substat.kind.toLowerCase() !== attrKey) {\n          return false;\n        }\n        if (substat.isAbsolute !== attrIsAbsolute) {\n          return false;\n        }\n      }\n      var msg = substat.level + \" rolls on \" + substat.kind;\n      whys = whys ? (whys + \". \" + msg) : msg;\n\n      return false;\n    });\n    return whys;\n  }\n\n  CheckByRarityRange(artifact, extra) {\n    if (!artifact || !artifact.rarity) return null;\n    var asNum = extra.numberer.Rarity(artifact.rarity);\n    var bounds = extra.rarityRange;\n    return (asNum >= bounds[0] && asNum <= bounds[1]) ? DONT_DISPLAY : null;\n  }\n\n  CheckByLevelRange(artifact, extra) {\n    if (!artifact || !('level' in artifact)) return null;\n    var asNum = artifact.level;\n    var bounds = extra.levelRange;\n    return (asNum >= bounds[0] && asNum <= bounds[1]) ? DONT_DISPLAY : null;\n  }\n\n  CheckBottomRowFlatMainStat(artifact) {\n    if (!artifact) return null;\n    if (artifact.requiredFraction) return null; // accessory\n    var kind = artifact.kind;\n    if (!kind) return null;\n    kind = kind.toLowerCase();\n    if (!(kind === \"gloves\" || kind === \"chest\" || kind === \"boots\")) return null;\n    var main = artifact.primaryBonus;\n    var mainKind = main.kind.toLowerCase();\n    // speed is flat, but gets an exemption...\n    if (mainKind === \"speed\") return null;\n    // (added later) same thing with acc and res\n    if (mainKind === \"accuracy\" || mainKind === \"resistance\") return null;\n    if (!main.isAbsolute) return null;\n    return \"bottom row flat main stat\";\n  }\n\n  onFilterChange(newState, checker) {\n    //console.log(\"newState = \" + newState + \", checker id = \" + checker.id);\n    var cur = this.state.checkedByCheckerId;\n    cur[checker.id] = newState;\n    this.setState({ checkedByCheckerId: cur });\n  }\n\n  checkerHtmlLabel(checker) {\n    var body = checker.label;\n    if (checker.labelInfo) {\n      if ('text' in checker.labelInfo) {\n        body = checker.labelInfo.text;\n      } else if ('bar' in checker.labelInfo) {\n        var props = checker.labelInfo.bar;\n        /**\n         * This took me forever to find. If I'm making a BarSpecifier,\n         * the 'initial' value must be set _at render time_. So not\n         * in the constructor. not anywhere else. Otherwise, React won't know\n         * to re-render the component when the appropriate state variable changes.\n         * So the 'labelInfo', for a BarSpecifier, has 'dynamic', a *function* that\n         * is called at run-time to evaluate any non-static values.\n         */\n        var dynamicProps = ('dynamic' in props) ? props.dynamic() : {};\n        //console.log('dynamicProps =', JSON.stringify(dynamicProps));\n        // put dynamicProps last here so it 'trumps' static values.\n        var stamped = Object.assign({}, props, dynamicProps);\n        // the bar specifier\n        body = <BarSpecifier {...stamped} />;\n      } else if ('range' in checker.labelInfo) {\n        props = checker.labelInfo.range;\n        dynamicProps = ('dynamic' in props) ? props.dynamic() : {};\n        //console.log('dynamicProps =', JSON.stringify(dynamicProps));\n        // put dynamicProps last here so it 'trumps' static values.\n        stamped = Object.assign({}, props, dynamicProps);\n        body = <RangeSpecifier {...stamped} />;\n      }\n    }\n    return checker.ttip ?\n      (<Tooltip title={checker.ttip}>{body}</Tooltip>)\n      : body;\n  }\n\n  renderSelectorPart() {\n    var rows = [];\n    var curCols = [];\n    const BOXES_PER_ROW = 3; // needs to divide into 24\n    var span = 24 / BOXES_PER_ROW;\n    this.state.checkers.forEach((checker, index) => {\n      if ((index % BOXES_PER_ROW) === 0) {\n        // end current row, start a new one.\n        if (curCols.length > 0) {\n          rows.push(<Row>{curCols}</Row>);\n        }\n        curCols = [];\n      }\n      var cur = this.state.checkedByCheckerId[checker.id];\n      curCols.push(<Col className=\"gutter-row\" span={span}>\n        <div><Switch size=\"small\" checked={cur} onChange={(checked, e) => { this.onFilterChange(checked, checker) }}></Switch>&nbsp;\n          {this.checkerHtmlLabel(checker)}</div>\n      </Col>)\n    });\n    if (curCols.length > 0) {\n      rows.push(<Row>{curCols}</Row>);\n    }\n\n    const divStyle = { \"textAlign\": \"left\" };\n    return (<div style={divStyle}>\n      <p><b>Show Artifacts that pass <i>all</i> of these checks:</b></p>\n      <hr />\n      {rows}\n      <hr />\n    </div >);\n  }\n\n  onDimensionChange(newDimension) {\n    if (newDimension === this.state.artifactDimension) {\n      return;\n    }\n    this.setState({ artifactDimension: newDimension });\n  }\n\n  compareArtifacts(art1, art2) {\n    if (!art1 && !art2) return 0;\n    if (!art1) return 1;\n    if (!art2) return -1;\n    var dimension = this.state.artifactDimension;\n    return this.state.comparer.ArtifactsOn(art1, art2, dimension);\n  }\n\n  render() {\n    if (!this.props.artifacts || this.props.artifacts.length === 0) {\n      return (<div><span>No artifacts to show</span></div>);\n    }\n    var numberer = this.state.numberer;\n    var formatter = new Formatter();\n    var runeHeader = <ArtifactDimensionChooser initialValue={this.state.artifactDimension}\n      reporter={(value) => this.onDimensionChange(value)} />;\n    const columns = [\n      {\n        title: runeHeader,\n        dataIndex: 'artifact',\n        key: 'artifact',\n        sorter: (a, b) => this.compareArtifacts(a.artifact, b.artifact),\n        render: (artifact) => {\n          return <ArtifactRune artifact={artifact} />;\n        },\n      },\n      {\n        title: 'SubStats',\n        dataIndex: 'subStats',\n        key: 'subStats',\n        render: (subStats, record, index) => (\n          <div>{formatter.Substats(subStats)}</div>\n        )\n      },\n      {\n        title: 'Wearer',\n        dataIndex: 'wearer',\n        key: 'wearer',\n        render: (champion) => <ChampionRune champion={champion} />,\n        sorter: (a, b) => {\n          return this.state.comparer.Champions(a.wearer, b.wearer)\n        }\n      },\n      {\n        title: 'Why',\n        dataIndex: 'why',\n        key: 'why',\n        sorter: (a, b) => {\n          //console.log(a.why + \"...\" + b.why)\n          return a.why.toLowerCase().localeCompare(b.why.toLowerCase());\n        }\n      },\n\n    ];\n    const dataByRows = [\n    ];\n    var extra = Object.assign({\n      numberer: numberer,\n    },\n      this.state\n    );\n    var shown = 0;\n    this.props.artifacts.some((artifact) => {\n      var toCheck = artifact.isSeen;\n      //if (!this.state.checkWornGear && artifact.wearer) toCheck = false;\n\n      if (toCheck) {\n        var passesAll = true;\n        var whys = [];\n        this.state.checkers.some((checker) => {\n          if (this.state.checkedByCheckerId[checker.id]) {\n            var why = checker.fn(artifact, extra);\n            if (why) {\n              if (DONT_DISPLAY !== why) {\n                whys.push(why);\n              }\n              return false; // keep checking\n            } else {\n              passesAll = false;\n              return true; // stop checking\n            }\n          }\n          return false;\n        });\n        if (passesAll) {\n          var rowData = {\n            key: artifact.id,\n            artifact: artifact,\n            subStats: artifact.secondaryBonuses,\n            wearer: artifact.wearer,\n            why: whys.join(',')\n\n          };\n          dataByRows.push(rowData);\n          shown++;\n        }\n      }\n      return (shown >= MAX_TO_SHOW);\n    });\n\n    /*\n    const paginationConfig = {\n      defaultPageSize: 50,\n      hideOnSinglePage: true,\n      pageSize: 50\n    }\n    */\n    const paginationConfig = false;\n    return (\n      <div>\n        {this.renderSelectorPart()}\n        <h3>{shown >= MAX_TO_SHOW ? \"at least \" : \"\"} {dataByRows.length} artifacts pass the checks.</h3>\n        <Table pagination={paginationConfig} dataSource={dataByRows} columns={columns} />\n      </div >\n    );\n  }\n}\n\nexport default ArtifactSellPage;","\nimport skillsConfig from './config/skills.json';\n\n// a factory that given champions, spits out their skills\n\nclass SkillsFactory {\n    constructor() {\n        // make a hash table from skill id to data.\n        var skillMap = {};\n        skillsConfig.skills.forEach((skillSpec) => {\n            skillMap[skillSpec.Id] = skillSpec;\n        })\n        this.skillMap = skillMap;\n    }\n\n    /**\n     * Returns the skills for a champion\n     * @param {*} champ - the champion\n     * @returns skills. An array, one per skill. Each entry in the array\n     *   is a dictionary with {id, name, level, maxLevel}\n     * if (maxLevel) is < 0, then it's unknown.\n     */\n    SkillsFor(champ) {\n        var skills = [];\n        if (!champ || !champ.skills) return skills;\n        champ.skills.forEach((skillBundle) => {\n            var id = skillBundle.typeId;\n            var level = skillBundle.level;\n            var name = \"Skill #\" + level;\n            var maxLevel = -1;\n            if (id in this.skillMap) {\n                name = this.skillMap[id].Name;\n                maxLevel = this.skillMap[id].Levels + 1;\n            }\n            skills.push({ id: id, name: name, level: level, maxLevel: maxLevel });\n        })\n        return skills;\n    }\n}\n\nexport default SkillsFactory;\n","\n\n// utility class that bundles a list of bonuses.\n// each bonus is a hash table, with keys (from the JSON file) of\n// kind - what attribute it's a bonus for, e.g. \"speed\".\n//   the pseudo-data value 'AMPLIFY' is a bonus derived\n// as an amplification of another (Lore of Steel).\n// isAbsolute - boolean. Is this an absolute increase?\n// value - the amount of the bonus\n// why - string describing the source of the bonus. optional,\n// used for display in the total stats display.\n\nclass BonusList {\n    constructor() {\n        this.bonuses = [];\n    }\n    Bonuses() {\n        return this.bonuses;\n    }\n    Add(kind, isAbsolute, value, why) {\n        var bundle = {\n            kind: kind,\n            isAbsolute: isAbsolute,\n            value: value,\n            why: why\n        }\n        this.bonuses.push(bundle);\n    }\n    AddBonus(bonus, why) {\n        var bundle = Object.assign({}, bonus, { why: why });\n        this.bonuses.push(bundle);\n    }\n}\n\nexport default BonusList;\n","// utility class that wraps all the calculation\n// (and none of the visuals) around calculating\n// the total stats for a champion.\nimport BonusList from './BonusList';\nimport arenaConfig from './config/arena.json';\nimport artifactSetConfig from './config/artifact_sets.json';\nimport artifactTypesConfig from './config/artifact_types.json';\nimport attributesConfig from './config/attributes.json';\nimport greatHallConfig from './config/great_hall.json';\nimport masteriesConfig from './config/masteries.json';\nimport Numberer from './Numberer';\n\nexport const BASE_COLUMN = \"BASE\";\nexport const ARTIFACTS_COLUMN = \"ARTIFACTS\";\nexport const GREAT_HALL_COLUMN = \"GREAT_HALL\";\nexport const ARENA_COLUMN = \"ARENA\";\nexport const MASTERIES_COLUMN = \"MASTERIES\";\nexport const TOTALS_COLUMN = \"TOTALS\";\nexport const AMPLIFY_BONUS = \"amplify\";\n\nclass TotalStatsCalculator {\n    constructor() {\n        this.bonuses = [];\n        this.numberer = new Numberer();\n        // load and store a map from attribute:level\n        // to what it's bonuses are.\n        this.greatHallBonusMap = {}\n        greatHallConfig.columns.forEach((configCol) => {\n            var key = configCol.key;\n            configCol.bonuses.forEach((bonusEntry) => {\n                var level = bonusEntry.level;\n                var bonus = {\n                    'kind': key.toLowerCase(),\n                    'isAbsolute': bonusEntry.isAbsolute,\n                    'value': bonusEntry.value\n                };\n                this.greatHallBonusMap[key + \":\" + level] = bonus;\n            });\n        });\n        // map from artifact set kind to set info\n        this.artifactSetInfo = {};\n        artifactSetConfig.sets.forEach((setConfig) => {\n            var set = setConfig.jsonKey;\n            this.artifactSetInfo[set] = setConfig;\n            this.artifactSetInfo[set.toLowerCase()] = setConfig;\n        });\n        // map from artifact slot to label\n        this.artifactLabelsBySlot = {}\n        artifactTypesConfig.artifact_types.forEach((typeConfig) => {\n            this.artifactLabelsBySlot[typeConfig.key.toLowerCase()] = typeConfig.label;\n        });\n    }\n\n    /**\n     * Makes the stats, still in unevaluated form.\n     * @param {Object} champion - the champion object as in the JSON file\n     * @param {string} arenaLeague - the arena league (e.g. 'silveriii') as in the JSON file\n     * @param {Object} greatHallLevels - the 'greatHall' hash as found in the JSON file\n     * @param {Object} artifactsById - hash from artifact id to artifact info. from the JSON file.\n     * \n     * It returns a hash, whose keys are:\n     * BASE - the 'base stats'.\n     * ARTIFACTS - the 'artifacts' column.\n     * GREAT_HALL - the 'great hall' column\n     * ARENA - the 'arena' column\n     * MASTERIES - the 'masteries' column\n     * \n     * Each of these keys points itself to a hash,\n     * whose keys are the attributes: \"health\", \"accuracy\", etc.\n     * Each of _those_ keys points to a value which is of type 'BonusList':\n     * an array of Bonuses, augmented to indicate why/how the bonus was computed.\n     * For example, if X is the result being returned:\n     * X[BASE][\"health\"] could equal [{kind:'health',isAbsolute: true, value:12000, why:null}]\n     *    indicating that the base health is 12000.\n     * X[ARTIFACTS][\"health\"] could then look like\n     *   [{kind:'health', isAbsolute: false, value:0.10,why:\"from Resilience set bonus\"},\n     *   {kind:'health', isAbsolute: true, value:480, why: 'from Boots substat'}]\n     */\n    MakeRaw(champion, arenaLeague, greatHallLevels, artifactsById) {\n        var columns = {}\n        columns[BASE_COLUMN] = this.computeBaseStats(champion, columns)\n        columns[ARENA_COLUMN] = this.computeArenaStats(this.computeArenaData(arenaLeague));\n        var elt = champion.element || \"Unknown\"; // happens for new champs.\n        columns[GREAT_HALL_COLUMN] = this.computeGreatHallStats(elt.toLowerCase(), greatHallLevels);\n        var setCounts = this.computeSets(champion.artifacts, artifactsById, champion.name);\n        columns[ARTIFACTS_COLUMN] = this.computeSetBonuses(setCounts);\n        columns[MASTERIES_COLUMN] = this.computeMasteries(champion.masteries, setCounts);\n        this.addPieceBonuses(columns[ARTIFACTS_COLUMN], champion.artifacts, artifactsById);\n        return columns;\n    }\n\n    /**\n     * Takes the output from 'MakeRaw' and \"Bakes\" it: evaluates every bonus,\n     * so all the values are straight numbers as displayed on the 'Total Stats' page in the app.\n     * Also computes the 'TOTALS' column.\n     * @param {*} champion \n     * @param {*} columnsIn \n     * @returns {Object} the baked columns, plus the totals column.\n     */\n    Bake(champion, columnsIn) {\n        if (!columnsIn) return columnsIn;\n        var totalColumn = {};\n        var columnsOut = {};\n        attributesConfig.attributes.forEach((attrSpec) => {\n            var attr = attrSpec.jsonKey;\n            var attrLc = attr.toLowerCase();\n            var baseVal = (attr in champion) ? champion[attr] : 0;\n            totalColumn[attrLc] = new BonusList();\n            var totalValue = baseVal;\n            // now go through each column....\n            Object.keys(columnsIn).some((columnKey) => {\n                if (columnKey === TOTALS_COLUMN) {\n                    return false; // just in case.\n                }\n                if (!columnsOut[columnKey]) {\n                    columnsOut[columnKey] = {};\n                }\n                var bonusesIn = columnsIn[columnKey][attrLc];\n                if (!bonusesIn) {\n                    return false;\n                }\n                // copy and evaluate.\n                totalValue += this.bakeCell(columnsOut, columnsIn, columnKey, attr, baseVal);\n                return false;\n            });\n            totalColumn[attrLc].Add(attrLc, true, totalValue, null);\n        });\n        columnsOut[TOTALS_COLUMN] = totalColumn;\n        return columnsOut;\n    }\n\n    /**\n     * 'One-stop shop'. You give it all the data affecting total stats,\n     * and it returns a 'baked' total stats, where all the total stat\n     * values are numbers, not percentages.\n     * @param {*} champion \n     * @param {*} arenaLeague \n     * @param {*} greatHallLevels \n     * @param {*} artifactsById \n     */\n    MakeAndBake(champion, arenaLeague, greatHallLevels, artifactsById) {\n        var rawColumns = this.MakeRaw(champion, arenaLeague, greatHallLevels, artifactsById);\n        var bakedColumns = this.Bake(champion, rawColumns);\n        return bakedColumns;\n    }\n\n    /**\n     * Evaluates a cell in the result.\n     * @param {*} columnsOut the output table to put the result in\n     * @param {*} columnsIn  the input table\n     * @param {*} columnKey  the column key\n     * @param {*} attr the row key\n     * @param {*} baseVal the base value for that attribute\n     * @returns the total value for the cell.\n     */\n    bakeCell(columnsOut, columnsIn, columnKey, attr, baseVal) {\n        attr = attr.toLowerCase();\n        if (!columnsIn || !columnsOut) return 0;\n        if (columnKey === TOTALS_COLUMN) return 0; // just in case\n        var listIn = columnsIn[columnKey][attr];\n        var listOut = new BonusList();\n        if (!listIn) {\n            columnsOut[columnKey][attr] = listOut;\n            return 0;\n        }\n        var total = 0;\n        listIn.Bonuses().forEach((bonusIn) => {\n            // if it's absolute, just copy it....\n            if (bonusIn.isAbsolute) {\n                listOut.AddBonus(bonusIn, bonusIn.why);\n                total += Math.round(this.numberer.EvaluateBonus(0, bonusIn));\n            } else {\n                var amt = Math.round(this.numberer.EvaluateBonus(baseVal, bonusIn));\n                listOut.Add(bonusIn.kind, true, amt, bonusIn.why);\n                //console.log('baked relative bonus ', JSON.stringify(bonusIn), ' val = ', amt, 'base = ', baseVal);\n                total += amt;\n            }\n        });\n        columnsOut[columnKey][attr] = listOut;\n        // kludge: don't count the base column twice.\n        if (columnKey === BASE_COLUMN) total = 0;\n        //console.log('bakeCell[', columnKey, '][', attr, '], in=', JSON.stringify(columnsIn[columnKey][attr]), ', out=', JSON.stringify(columnsOut[columnKey][attr]), ', tot = ', total);\n        return total;\n    }\n\n    /**\n     * Computes the mastery bonuses\n     * @param {array} masteryIds the ids of the champ masteries\n     * @param {Object} setCounts armor sets the champion has.\n     * @returns the map from attribute to BonusList for masteries\n     */\n    computeMasteries(masteryIds, setCounts) {\n        var column = {}\n        if (!masteryIds) return column;\n        masteriesConfig.masteries.some((masterySpec) => {\n            //console.log(masterySpec.label + \":\" + masterySpec.key);\n            if (!masterySpec.key) return false;\n            if (masteryIds.indexOf(masterySpec.key) === -1) return false;\n            if (!masterySpec.bonuses || masterySpec.bonuses.length === 0) {\n                return false;\n            }\n            masterySpec.bonuses.forEach((bonus) => {\n                var attr = bonus.kind.toLowerCase();\n                if (attr === AMPLIFY_BONUS.toLowerCase()) {\n                    // do they have sets that this amplifies?\n                    Object.entries(setCounts).some((tuple) => {\n                        var setKey = tuple[0];\n                        var count = tuple[1];\n                        if (count <= 0) return false;\n                        if (masterySpec.setBonusFor.indexOf(setKey) === -1) {\n                            return false;\n                        }\n                        var setName = this.artifactSetInfo[setKey].label;\n                        this.artifactSetInfo[setKey].bonuses.forEach((setBonus) => {\n                            var amplification = setBonus.value * bonus.value;\n                            var toAttr = setBonus.kind.toLowerCase();\n\n                            if (!(toAttr in column)) {\n                                column[toAttr] = new BonusList();\n                            }\n                            column[toAttr].Add(setBonus.kind, setBonus.isAbsolute, amplification, masterySpec.label + \" bonus to \" + setName + \" set\");\n                            //console.log('just added amplification bonus of ', amplification, ' to ', toAttr);\n                        });\n                        return false;\n                    });\n                } else {\n                    if (!(attr in column)) {\n                        column[attr] = new BonusList();\n                    }\n                    column[attr].AddBonus(bonus, masterySpec.label + ' mastery bonus');\n                }\n            });\n            return false;\n        });\n        //console.log('masteries column ', JSON.stringify(column));\n        return column;\n    }\n\n    /**\n     * An artifact relative bonus to CR or CD comes in\n     * as (isAbsolute:false) and value as a float, e.g. 0.05\n     * for a 5% increase. But the base stat itself is stored\n     * as a number, e.g. base CR of 60% is stored as (60).\n     * Blech. So need to align the 2. Easiest is to align\n     * the artifact one to the base one:\n     * @param {Bonus} bonusIn the incoming bonus.\n     */\n    tweakCRCD(bonusIn) {\n        var bonusOut = Object.assign({}, bonusIn);\n        var kind = bonusIn.kind.toLowerCase();\n        if (kind === 'criticalchance' || kind === 'criticaldamage') {\n            bonusOut.value = Math.round(bonusOut.value * 100);\n            if ('enhancement' in bonusOut) {\n                bonusOut.enhancement = Math.round(bonusOut.enhancement * 100);\n            }\n            bonusOut.isAbsolute = true;\n        }\n        return bonusOut;\n    }\n\n    /**\n     * Compute the bonuses from individual artifacts.\n     * @param {*} column the artifact column\n     * @param {*} artifactIds array of artifacts worn by the champion\n     * @param {*} artifactsById maps from artifact ids to artifact info.\n     * @return nothing, side-effects into (columns)\n     */\n    addPieceBonuses(column, artifactIds, artifactsById) {\n        if (!column || !artifactIds || !artifactsById) {\n            return;\n        }\n        artifactIds.some((artifactId) => {\n            var artifactInfo = artifactsById[artifactId];\n            if (!artifactInfo) return false;\n            var artifactLabel = this.artifactLabelsBySlot[artifactInfo.kind.toLowerCase()];\n            if (artifactInfo.primaryBonus) {\n                var attr = artifactInfo.primaryBonus.kind.toLowerCase();\n                var asList = (attr in column) ? column[attr] : (new BonusList());\n                asList.AddBonus(this.tweakCRCD(artifactInfo.primaryBonus), artifactLabel + \" main stat\");\n                column[attr] = asList;\n            }\n            if (artifactInfo.secondaryBonuses) {\n                artifactInfo.secondaryBonuses.forEach((bonus) => {\n                    var attr = bonus.kind.toLowerCase();\n                    var asList = (attr in column) ? column[attr] : (new BonusList());\n                    asList.AddBonus(this.tweakCRCD(bonus), artifactLabel + \" substat\");\n                    column[attr] = asList;\n                });\n            }\n            return false;\n        });\n    }\n\n    computeArenaData(arenaLeague) {\n        var data = null;\n        arenaConfig.levels.some((arenaLevel) => {\n            if (arenaLevel.jsonKey === arenaLeague) {\n                data = arenaLevel;\n                return true;\n            }\n            return false;\n        });\n        return data;\n    }\n\n    computeArenaStats(arenaData) {\n        var column = {};\n        if (!arenaData || !arenaData.bonuses) { return column; }\n        arenaData.bonuses.some((bonus) => {\n            var attr = bonus.kind.toLowerCase();\n            if (!(attr in column)) {\n                column[attr] = new BonusList();\n            }\n            column[attr].AddBonus(bonus, null);\n            return false;\n        });\n        return column;\n    }\n\n    computeGreatHallStats(affinity, greatHallLevels) {\n        var column = {};\n        if (!greatHallLevels || !(affinity in greatHallLevels)) return column;\n        var levelsByAttr = greatHallLevels[affinity];\n        attributesConfig.attributes.forEach((attrSpec) => {\n            // great hall levels do _not_ have keys in lower case,\n            // but the columns do...\n            var attr = attrSpec.jsonKey;\n            var attrLc = attr.toLowerCase();\n            if (attr in levelsByAttr) {\n                var level = levelsByAttr[attr];\n                var bonus = this.greatHallBonusMap[attr + \":\" + level];\n                if (bonus) {\n                    var asList = new BonusList();\n                    asList.AddBonus(this.tweakCRCD(bonus), null);\n                    column[attrLc] = asList;\n                }\n            }\n        });\n        return column;\n    }\n\n    computeBaseStats(champion) {\n        var column = {};\n        if (!champion) return column;\n        attributesConfig.attributes.forEach((attrSpec) => {\n            var attr = attrSpec.jsonKey; // leave case alone.\n            var attrLc = attr.toLowerCase();\n            var val = (attr in champion) ? champion[attr] : 0;\n            if (!(attr in column)) {\n                column[attrLc] = new BonusList();\n            }\n            column[attrLc].Add(attr, true, val, null);\n        });\n        return column;\n    }\n\n    /**\n     * Computes which armor sets the champion has, and how many of them.\n     * @returns a hash, key is armor set, value is # of those sets. Only\n     * populated for values > 1. For example, {\"speed\":2, \"life\":1}\n     * @param {array} artifactIds array of worn artifact Ids\n     * @param {Object} artifactsById hash from id to artifact info.\n     */\n    computeSets(artifactIds, artifactsById, champName) {\n        if (!artifactIds || !artifactsById) {\n            return {};\n        }\n        var counts = {};\n        artifactIds.forEach((artifactId) => {\n            var artifact = artifactsById[artifactId];\n            if (artifact) {\n                var set = artifact.setKind;\n                if (set && !(set === \"None\")) {\n                    var val = (set in counts) ? counts[set] : 0;\n                    counts[set] = val + 1;\n                }\n            }\n        });\n        // divide the counts by the amount needed, that tells you\n        // how many sets they have.\n        var filtered = {};\n        Object.keys(counts).forEach((setKind) => {\n            var key = setKind;\n            if (!this.artifactSetInfo[key]) {\n                console.log('\\tunknown artifact set', key, ' being worn by ', champName);\n            } else {\n                var minSize = ('set_size' in this.artifactSetInfo[key]) ?\n                    this.artifactSetInfo[key].set_size : 4;\n                var times = Math.floor(counts[key]) / minSize;\n                if (times >= 1) {\n                    filtered[key] = times;\n                }\n            }\n        });\n        //console.log('set counts =', JSON.stringify(counts));\n        return filtered;\n    }\n\n    /**\n     * Computes the overall set bonuses (e.g. a 'Perception' set: +40 ACC, SPD+5%\n     * for the current champion. \n     * @param {Object} setCounts map from setKind to # times foound\n     */\n    computeSetBonuses(setCounts) {\n        //console.log('setCounts=', JSON.stringify(setCounts));\n        var column = {};\n        var suffixes = {\n            0: '',\n            1: ' (2nd set)',\n            2: ' (3rd set)'\n        };\n\n        Object.entries(setCounts).some((tuple) => {\n            var setKind = tuple[0];\n            var numSets = tuple[1];\n            if (numSets < 1) {\n                return false;\n            }\n            var setInfo = this.artifactSetInfo[setKind];\n            if (!setInfo || !setInfo.bonuses) {\n                return false;\n            }\n            // add them in, if we have them.\n            setInfo.bonuses.forEach((bonus) => {\n                var attr = bonus.kind.toLowerCase();\n                var asList = (attr in column) ? column[attr] : (new BonusList());\n                // if you have more than one set, they are applied separately.\n                // e.g. two 10% boosts aren't one 20% boost (100 --> 120), they are\n                // (10% boost)*(10% boost) (100 --> 121)\n\n                // can never have more than 3 sets...\n                for (var i = 0; i < numSets && i < 3; i++) {\n                    asList.AddBonus(bonus, setInfo.label + \" set bonus\" + suffixes[i]);\n                }\n                column[attr] = asList;\n            });\n            return false;\n        });\n        //console.log('set bonuses', JSON.stringify(column));\n        return column;\n    }\n}\n\nexport default TotalStatsCalculator;\n","import React from 'react';\nimport { AutoComplete, Popover, Table } from 'antd'\nimport arenaConfig from './config/arena.json';\nimport Formatter from './Formatter';\nimport Numberer from './Numberer';\nimport artifactTypeConfig from './config/artifact_types.json';\nimport attributesConfig from './config/attributes.json';\nimport markersConfig from './config/markers.json';\nimport masteriesConfig from './config/masteries.json';\nimport ArtifactRune from './ArtifactRune';\nimport MarkerRune from './MarkerRune';\nimport SkillsFactory from './SkillsFactory';\nimport TotalStatsCalculator,\n{\n  ARENA_COLUMN, BASE_COLUMN, GREAT_HALL_COLUMN, TOTALS_COLUMN,\n  MASTERIES_COLUMN, ARTIFACTS_COLUMN\n} from './TotalStatsCalculator';\nimport { Row, Col } from 'antd';\n\n// props:\n// champions - array of champions\n// artifactsById - hash of artifacts indexed by id\n// reporter - f(champion), call when chosen\n// curChamp - current champion, if any\n// arenaKey - key into arena data.\n// greatHallLevels - values from great hall\nclass ChampionDetailPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formatter = new Formatter();\n    this.numberer = new Numberer();\n    // map from attribute json to my key\n    this.attributesByJsonKey = {};\n    attributesConfig.attributes.forEach((attrSpec) => {\n      this.attributesByJsonKey[attrSpec.jsonKey.toLowerCase()] = attrSpec;\n    });\n    // map from artifact key to structure\n    this.artifactTypesByKey = {};\n    artifactTypeConfig.artifact_types.forEach((typeSpec) => {\n      this.artifactTypesByKey[typeSpec.key.toLowerCase()] = typeSpec;\n    });\n    this.arenaData = {};\n    arenaConfig.levels.some((arenaLevel) => {\n      if (arenaLevel.jsonKey === this.props.arenaKey) {\n        this.arenaData = arenaLevel;\n        return true;\n      }\n      return false;\n    });\n  }\n\n  onSelect(value, option) {\n    this.props.reporter(this.props.champions[option.index]);\n  }\n\n  markerFromKey(markerKey) {\n    if (!markerKey || markerKey === \"None\") return null;\n    var answer = null;\n    markersConfig.markers.some((markerSpec) => {\n      if (markerSpec.key === markerKey) {\n        answer = markerSpec;\n        return true;\n      }\n      return false;\n    });\n    return answer;\n  }\n\n  renderAutoCompleter(champions) {\n    var options = [];\n    var prompt = this.props.curChamp ? \"choose a different champion\"\n      : \"choose a champion\"\n    if (champions) {\n      champions.forEach((champion, index) => {\n        // show the marker, if there is one:\n        var markerSpec = this.markerFromKey(champion.marker);\n        // and add the id to disambiguate if no markers:\n        var extra = markerSpec ? markerSpec.label : champion.id;\n        options.push({ 'value': champion.name + ' (' + extra + ')', 'key': champion.id, 'index': index });\n      });\n      return (\n        <div>\n          <span>{prompt}: </span>\n          <AutoComplete\n            style={{\n              width: 200,\n            }}\n            options={options}\n            placeholder=\"type champion name\"\n            onSelect={(value, option) => this.onSelect(value, option)}\n            filterOption={(inputValue, option) =>\n              option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n            }\n          />\n        </div>\n      )\n    } else {\n      return null;\n    }\n  }\n\n  hasDetail(bonusList) {\n    if (!bonusList || !bonusList.Bonuses()) return false;\n    var list = bonusList.Bonuses();\n    if (list.length >= 2) return true;\n    return (list[0].why !== null);\n  }\n  renderTotalStats() {\n    var arenaLabel = this.arenaData ? (\" (\" + this.arenaData.label + \")\") : \"\";\n\n    const columns = [\n      {\n        title: 'Basic Stats',\n        dataIndex: 'base_stats',\n        key: 'base_stats'\n      },\n      {\n        title: 'Artifacts',\n        dataIndex: 'artifacts',\n        key: 'artifacts'\n      },\n      {\n        title: 'Great Hall',\n        dataIndex: 'great_hall',\n        key: 'great_hall'\n      },\n      {\n        title: 'Classic Arena' + arenaLabel,\n        dataIndex: 'arena',\n        key: 'arena'\n      },\n      {\n        title: 'Masteries',\n        dataIndex: 'masteries',\n        key: 'masteries',\n      },\n      {\n        title: 'Total',\n        dataIndex: 'total',\n        key: 'total',\n      }\n    ];\n    var curChamp = this.props.curChamp;\n    const dataByRows = [\n    ];\n    var calculator = new TotalStatsCalculator();\n\n    var stats;\n    //var cached = false;\n    if (this.props.knownChampionTotalStats && (curChamp.id in this.props.knownChampionTotalStats)) {\n      stats = this.props.knownChampionTotalStats[curChamp.id];\n      //cached = true;\n    } else {\n      stats = calculator.MakeAndBake(curChamp, this.props.arenaKey, this.props.greatHallLevels, this.props.artifactsById);\n    }\n    /**\n     * can't change state during a render, causes an infinite loop.\n     * causes a run-time warning, and is dangerous. oh well.\n    if (!cached && this.props.onComputeTotalStats) {\n      this.props.onComputeTotalStats(curChamp.id, stats);\n    };\n    */\n    //console.log('stats = ' + JSON.stringify(stats[GREAT_HALL_COLUMN]));\n\n    attributesConfig.attributes.forEach((attrSpec) => {\n      var attr = attrSpec.jsonKey;\n      var attrKey = attr.toLowerCase();\n      var rowData = { key: attr };\n      // base stats.\n      var base = (stats && stats[BASE_COLUMN] && stats[BASE_COLUMN][attrKey]) ?\n        stats[BASE_COLUMN][attrKey].Bonuses()[0].value : 0;\n      rowData['base_stats'] =\n        attrSpec.label + \"  \" + base;\n\n      //the interior rows.\n      var cols = [ARTIFACTS_COLUMN, MASTERIES_COLUMN, ARENA_COLUMN, GREAT_HALL_COLUMN];\n      var rowDataKeys = ['artifacts', 'masteries', 'arena', 'great_hall'];\n      for (var i = 0; i < cols.length; i++) {\n        var columnKey = cols[i];\n        var rowDataKey = rowDataKeys[i];\n        var cellBonuses = stats[columnKey][attrKey];\n        var toShow = null;\n        if (!cellBonuses || !cellBonuses.Bonuses()) {\n          //console.log('no artifact bonuses for ' + attr);\n          toShow = '';\n        } else if (!this.hasDetail(cellBonuses)) {\n          //console.log('artifactBonuses[', attr, '] =', JSON.stringify(artifactBonuses.Bonuses()));\n          var val = this.numberer.EvaluateBonus(0, cellBonuses.Bonuses()[0]);\n          toShow = <span attr={attr}>+{val}</span>;\n        } else {\n          //console.log('artifactBonuses[', attr, '] =', JSON.stringify(artifactBonuses.Bonuses()));\n          var cellTotal = 0;\n          var parts = [];\n          // eslint-disable-next-line \n          cellBonuses.Bonuses().forEach((bonus, index) => {\n            let val = this.numberer.EvaluateBonus(0, bonus);\n            cellTotal += val;\n            parts.push(<li key={index}>{val} from {bonus.why}</li>);\n          });\n          var ul = <ul className=\"bonus_popover\">{parts}</ul>\n          toShow = <Popover content={ul} focus=\"hover\"><span className=\"has_popover\" attr={attr}>+{cellTotal}</span></Popover >\n        }\n        rowData[rowDataKey] = toShow;\n      }\n      var total = (stats && stats[TOTALS_COLUMN] && stats[TOTALS_COLUMN][attrKey]) ?\n        stats[TOTALS_COLUMN][attrKey].Bonuses()[0].value : 0;\n      rowData['total'] = Math.round(total);\n\n      dataByRows.push(rowData);\n\n    });\n    return (<div>\n      <hr />\n      <Table pagination={false} dataSource={dataByRows} columns={columns} />\n    </div>);\n  }\n\n  renderArtifact(typeSpec, artifact, cellWidth) {\n    if (!artifact) {\n      return;\n    }\n    var parts = [];\n    parts.push(<ArtifactRune artifact={artifact} />);\n    if (artifact.secondaryBonuses && artifact.secondaryBonuses.length > 0) {\n      parts.push(this.formatter.Substats(artifact.secondaryBonuses));\n    }\n    return <Col span={cellWidth} key={artifact.id}>{parts}</Col>\n\n  }\n\n  renderArtifacts(artifactIds) {\n    if (!artifactIds || artifactIds.length === 0) {\n      return <span>Isn't wearing any artifacts.</span>\n    }\n    // map from the _kind_ to the artifact objects.\n    var ownedByKind = {};\n    var unfoundArtifactIds = [];\n    artifactIds.forEach((id) => {\n      if (id in this.props.artifactsById) {\n        var artifactObj = this.props.artifactsById[id];\n        ownedByKind[artifactObj.kind.toLowerCase()] = artifactObj;\n      } else {\n        unfoundArtifactIds.push(id);\n      }\n    });\n    var parts = [];\n    const ARTIFACTS_PER_ROW = 3;\n    var cellWidth = 24 / ARTIFACTS_PER_ROW; // 24 from Ant.\n    var rowCells = [];\n    var rowNum = 0;\n    artifactTypeConfig.artifact_types.forEach((typeSpec, index) => {\n      var key = typeSpec.key.toLowerCase();\n      rowCells.push(this.renderArtifact(typeSpec, ownedByKind[key], cellWidth));\n      if (rowCells.length >= ARTIFACTS_PER_ROW) {\n        // finish it off.\n        parts.push(<Row key={rowNum} gutter=\"2\">{rowCells} </Row>);\n        // and start a new one.\n        rowCells = [];\n        rowNum++;\n      }\n    });\n    if (rowCells.length > 0) {\n      // finish it off.\n      parts.push(<Row key={rowNum} gutter=\"2\">{rowCells} </Row>);\n    }\n    if (unfoundArtifactIds.length > 0) {\n      parts.push(<span>Unfound artifacts: {JSON.stringify(unfoundArtifactIds)}</span>)\n    }\n\n    return <div>{parts}</div>;\n  }\n\n  renderSkills(champ) {\n    if (!champ || !champ.skills) {\n      return <span>(no skills)</span>;\n    }\n    var factory = new SkillsFactory();\n    var skillsArray = factory.SkillsFor(champ);\n    var asList = this.formatter.Skills(skillsArray);\n    return (<div><p><b>Skills:</b></p>{asList}</div >);\n  }\n\n  renderMasteries(masteries) {\n    if (!masteries || masteries.length === 0) {\n      return <span>(no masteries)</span>;\n    }\n    // display by branch, within that by tier, within that random.\n    var masterySpecs = [];\n    var numMasteries = 0;\n    masteriesConfig.masteries.some((masterySpec) => {\n      if (!masterySpec || !masterySpec.key) return false;\n      if (masteries.indexOf(masterySpec.key) === -1) return false;\n      masterySpecs.push(masterySpec);\n      numMasteries++;\n      return false;\n    });\n    masterySpecs.sort((m1, m2) => {\n      var delta = m1.branch.localeCompare(m2.branch);\n      if (delta !== 0) return delta;\n      delta = m1.tier - m2.tier;\n      if (delta !== 0) return delta;\n      return m1.label.localeCompare(m2.label);\n    });\n\n    var elements = [];\n    var inBranch = [];\n    var prevBranchName = \"\";\n    var formatter = this.formatter;\n    masterySpecs.forEach((spec, index) => {\n      if (spec.branch !== prevBranchName) {\n        if (prevBranchName !== \"\") {\n          elements.push(<li key={index}>\n            <b>{prevBranchName}:</b>\n            {inBranch}\n          </li>);\n        }\n        inBranch = [];\n      }\n      prevBranchName = spec.branch;\n      inBranch.push(formatter.Image(spec.img, spec.label, { \"className\": \"mastery_icon\" }));\n    });\n    if (inBranch.length > 0) {\n      elements.push(<li key={masterySpecs.length}>\n        <b>{prevBranchName}:</b>\n        {inBranch}\n      </li>);\n    }\n    const MAX_MASTERIES = 15;\n    var blurb = (numMasteries === MAX_MASTERIES) ? <span className=\"all_masteries\">(Have 'em all)</span> :\n      <span>(need {MAX_MASTERIES - numMasteries} more)</span>;\n    return (<div><p><b>Masteries:</b> {blurb}</p><ul className=\"mastery_list\">{elements}</ul></div >);\n  }\n\n  renderChamp(champ) {\n    var formatter = this.formatter;\n    var numberer = this.numberer;\n    if (!champ) {\n      return null;\n    }\n    var parts = [];\n    //var imgName = champ.name.replace(/ /g, \"_\");\n    // folder name is champ name, all lcs, with spaces to dashes.\n    var folderName = champ.name.replace(/ /g, \"-\").toLowerCase();\n\n    //var imgUrl = \"https://raw.githubusercontent.com/PatPat1567/RaidShadowLegendsData/master/images/avatar/\" + imgName + \".png\";\n    var imgUrl = \"https://raw.githubusercontent.com/raidchamps/static-data/main/images/avatar/\" + folderName + \"/image.png\";\n    var unknownUrl = \"https://raw.githubusercontent.com/raidchamps/static-data/main/images/avatar/1default/image.png\";\n\n    // <source srcset={imgUrl} />\n    parts.push(<picture key=\"c0\">\n      <source srcSet={imgUrl} />\n      <img src={unknownUrl} className=\"champion_avatar\" alt={\"picture of \" + champ.name} />\n    </picture>);\n    parts.push(<span key=\"c1\">{champ.rarity}</span>);\n    parts.push(<span key=\"c2\"> {champ.element}</span>);\n    parts.push(<span key=\"c3\"> {numberer.RankFromStars(champ.grade)} *</span>);\n    parts.push(formatter.Faction(champ.fraction));\n    parts.push(<span key=\"c4\">&nbsp;{champ.role}</span>);\n    parts.push(<span key=\"c5\">  <b>{champ.name}</b></span>);\n    parts.push(<span key=\"c6\">, level {champ.level}</span>);\n    if (champ.inStorage) {\n      parts.push(<span key=\"c7\"> (Vault)</span>);\n    }\n\n    if (champ.marker && champ.marker !== \"None\") {\n      var spec = this.markerFromKey(champ.marker);\n      if (spec) {\n        parts.push(<span key=\"c8\">. Marker:</span>);\n        parts.push(<MarkerRune key=\"c9\" marker={champ.marker} />);\n      }\n    }\n\n    parts.push(<hr key=\"c10\" />);\n    parts.push(this.renderArtifacts(champ.artifacts));\n    parts.push(<hr key=\"c12\" />);\n    parts.push(this.renderMasteries(champ.masteries));\n    parts.push(this.renderSkills(champ));\n    parts.push(<hr key=\"c14\" />);\n    parts.push(this.renderTotalStats());\n    return <div>{parts}</div>;\n  }\n  render() {\n    return (\n      <div>\n        {this.renderAutoCompleter(this.props.champions)}\n        {this.renderChamp(this.props.curChamp)}\n      </div>\n    );\n  }\n}\n\nexport default ChampionDetailPage;","import React from 'react';\nimport Comparer, { DIMENSION_NONE } from './Comparer';\nimport Formatter from './Formatter';\nimport Numberer from './Numberer';\nimport { Col, Row, Switch, Table, Tooltip } from 'antd';\nimport ArtifactDimensionChooser from './ArtifactDimensionChooser';\nimport ChampionRune from './ChampionRune';\nimport BarSpecifier from './BarSpecifier';\nimport artifactTypeConfig from './config/artifact_types.json';\nimport attributesConfig from './config/attributes.json';\nimport factionsConfig from './config/factions.json';\nimport markersConfig from './config/markers.json';\nimport TotalStatsCalculator, { TOTALS_COLUMN } from './TotalStatsCalculator';\nimport SkillsFactory from './SkillsFactory';\nimport RangeSpecifier from './RangeSpecifier';\n\nconst RANK_INTRO = \"Rank\";\nconst RANK_KEYS = [1, 2, 3, 4, 5, 6];\nconst AFFINITY_INTRO = \"Affinity\";\n// not worth it to make a config file out of this, yet:\n// in the order shown when 'view by affinity' done in the app\nconst AFFINITY_KEYS = [\"void\", \"force\", \"magic\", \"spirit\"];\nconst AFFINITY_LABELS = {\n  void: \"Void\", force: \"Force\",\n  magic: \"Magic\", spirit: \"Spirit\"\n};\n// the display looks off if you don't give an initial value\nconst AFFINITY_INITIAL = \"force\";\n\nconst VAULT_INTRO = \"Vaulted\";\nconst VAULT_KEYS = [\"no\", \"yes\"];\nconst VAULT_LABELS = { \"no\": \"No\", \"yes\": \"Yes\" };\nconst VAULT_INITIAL = \"no\";\n\nconst MARKER_INTRO = \"Marker\";\nconst MARKER_INITIAL = \"None\";\n\nconst FACTION_INTRO = \"Faction\";\n\nconst BOOKS_INTRO = \"Books\";\nconst BOOKS_NONE = \"none\";\nconst BOOKS_SOME = \"some\";\nconst BOOKS_ALL = \"all\";\nconst BOOKS_KEYS = [BOOKS_NONE, BOOKS_SOME, BOOKS_ALL];\nconst BOOKS_LABELS = {\n  \"none\": \"None\",\n  \"some\": \"Some\", \"all\": \"All\"\n};\nconst BOOKS_INITIAL = BOOKS_SOME;\n\nconst MASTERIES_INTRO = \"Masteries\";\nconst MASTERIES_NONE = \"none\";\nconst MASTERIES_SOME = \"some\";\nconst MASTERIES_ALL = \"all\";\nconst MASTERIES_KEYS = [MASTERIES_NONE, MASTERIES_SOME, MASTERIES_ALL];\nconst MASTERIES_LABELS = {\n  \"none\": \"None\",\n  \"some\": \"Some\", \"all\": \"All\"\n};\nconst MASTERIES_INITIAL = MASTERIES_SOME;\n\nconst DONT_DISPLAY = \"Uninteresting\";\n\n// props:\n// newTotalStatsReporter - called when I I compute new total stats.\nclass ChampionPage extends React.Component {\n  constructor(props) {\n    super(props);\n    const INITIAL_RANK_BAR = 4;\n    const STARTING_IS_LOWER_BOUND = true;\n    // all the checkers for what to display.\n    // a checker is a function that takes a champion JSON blob,\n    // and returns a string indicating why to display it - null if not.\n    var checkers = [];\n    var id = 0;\n    var rankLabels = {};\n    var formatter = new Formatter();\n    this.formatter = formatter;\n    RANK_KEYS.forEach((rank) => {\n      rankLabels[rank] = formatter.Rank(rank);\n    });\n    var factionsByKey = {};\n    var factionKeys = [];\n    var factionLabels = {};\n    var initialFactionKey = null;\n    var initialFactionOrdinality = null;\n    // ugly kludge: shadowkin are called 'Samurai' (for champs),\n    // and 'AssassinsGuild' for accessories. Yuk.\n    //var dontUse = \"AssassinsGuild\";\n    factionsConfig.factions.forEach((faction) => {\n      if (true /*faction.key !== dontUse */) {\n        factionsByKey[faction.key] = faction;\n        factionKeys.push(faction.key);\n        factionLabels[faction.key] = faction.label;\n        if (!initialFactionKey || (initialFactionOrdinality > faction.ordinality)) {\n          initialFactionKey = faction.key;\n          initialFactionOrdinality = faction.ordinality;\n        }\n      }\n    });\n    this.state = {\n      affinityBar: AFFINITY_INITIAL,\n      rankBar: INITIAL_RANK_BAR,\n      is_lower_bound: STARTING_IS_LOWER_BOUND,\n      vaultBar: VAULT_INITIAL,\n      markerBar: MARKER_INITIAL,\n      factionBar: initialFactionKey,\n      booksBar: BOOKS_INITIAL,\n      masteriesBar: MASTERIES_INITIAL\n    };\n    // make the marks for ranks\n    const MIN_RANK = 1;\n    const MAX_RANK = 6;\n    var marks = {};\n    for (let i = MIN_RANK; i <= MAX_RANK; i++) {\n      marks[i] = \"\" + i;\n    }\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_range: true,\n        intro: RANK_INTRO,\n        reporter: (v) => this.onRankRangeChange(v),\n        dynamic: () => { return { 'value': this.state.rankRange } },\n        opts: {\n          defaultValue: [MIN_RANK, MAX_RANK],\n          min: MIN_RANK,\n          max: MAX_RANK,\n          step: 1,\n          marks: marks\n        }\n      }),\n      fn: this.CheckByRankRange,\n    });\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_exact: true,\n        reporter: ((v, b) => this.onAffinityBarChange(v, b)),\n        intro: AFFINITY_INTRO,\n        keys: AFFINITY_KEYS,\n        labels: AFFINITY_LABELS,\n        dynamic: () => { return { 'initial': this.state.affinityBar } }\n      }),\n      fn: this.CheckAffinity\n    });\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        intro: FACTION_INTRO,\n        is_exact: true,\n        reporter: (v, b) => this.onFactionBarChange(v, b),\n        keys: factionKeys,\n        labels: factionLabels,\n        dynamic: () => { return { 'initial': this.state.factionBar } },\n      }),\n      fn: this.CheckFaction,\n    });\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_exact: true,\n        reporter: ((v, b) => this.onVaultBarChange(v, b)),\n        intro: VAULT_INTRO,\n        keys: VAULT_KEYS,\n        labels: VAULT_LABELS,\n        dynamic: () => { return { 'initial': this.state.vaultBar } }\n      }),\n      fn: this.CheckVault\n    });\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_exact: true,\n        reporter: ((v, b) => this.onBooksBarChange(v, b)),\n        intro: BOOKS_INTRO,\n        keys: BOOKS_KEYS,\n        labels: BOOKS_LABELS,\n        dynamic: () => { return { 'initial': this.state.booksBar } }\n      }),\n      fn: this.CheckBooks\n    });\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_exact: true,\n        reporter: ((v, b) => this.onMasteriesBarChange(v, b)),\n        intro: MASTERIES_INTRO,\n        keys: MASTERIES_KEYS,\n        labels: MASTERIES_LABELS,\n        dynamic: () => { return { 'initial': this.state.masteriesBar } }\n      }),\n      fn: this.CheckMasteries\n    });\n    var markerKeys = [];\n    var markerLabels = {};\n    markersConfig.markers.forEach((markerSpec) => {\n      markerKeys.push(markerSpec.key);\n      markerLabels[markerSpec.key] = markerSpec.label;\n    });\n    checkers.push({\n      id: id++,\n      labelInfo: this.makeLabelInfo({\n        is_exact: true,\n        reporter: ((v, b) => this.onMarkerBarChange(v, b)),\n        intro: MARKER_INTRO,\n        keys: markerKeys,\n        labels: markerLabels,\n        dynamic: () => { return { 'initial': this.state.markerBar } }\n      }),\n      fn: this.CheckMarker\n    });\n    checkers.push({\n      id: id++, label: \"has a dupe\",\n      labelInfo: this.makeLabelInfo(\"has a dupe\"),\n      fn: this.CheckHasDupe\n    });\n    checkers.push({\n      id: id++, label: \"under-ascended\",\n      labelInfo: this.makeLabelInfo(\"under-ascended\"),\n      ttip: \"fewer ascensions than rank\", fn: this.CheckUnderAscended\n    });\n    checkers.push({\n      id: id++, label: \"missing armor\",\n      labelInfo: this.makeLabelInfo(\"missing armor\"),\n      ttip: \"empty armor slot\", fn: this.CheckMissingArmor\n    });\n    checkers.push({\n      id: id++, label: \"inferior gear rank\",\n      labelInfo: this.makeLabelInfo(\"inferior gear rank\"),\n      ttip: \"gear 2 or more stars below the champion\", fn: this.CheckInferiorGear\n    });\n    checkers.push({\n      id: id++, label: \"inferior gear rarity\",\n      labelInfo: this.makeLabelInfo(\"inferior gear rarity\"),\n      ttip: \"gear < Rare\", fn: this.CheckInferiorRarity\n    });\n    checkers.push({\n      id: id++, label: \"glyph-able worn artifact\",\n      labelInfo: this.makeLabelInfo(\"glyph-able worn artifact\"),\n      ttip: \"worn artifact with an attribute that is glyph-able, but isn't\", fn: this.CheckGlyphable\n    });\n    checkers.push({\n      id: id++, label: \"missing accessory\",\n      labelInfo: this.makeLabelInfo(\"missing accessory\"),\n      ttip: \"fillable accessory slot\", fn: this.CheckMissingAccessory\n    });\n\n\n    var checkedByCheckerId = {};\n    checkers.forEach((checker) => {\n      var v = (checker.fn === this.CheckVault);\n      checkedByCheckerId[checker.id] = v;\n    });\n\n    var attributesByKey = {};\n    attributesConfig.attributes.forEach((attrSpec) => {\n      var key = attrSpec.jsonKey;\n      attributesByKey[key] = attrSpec;\n      attributesByKey[key.toLowerCase()] = attrSpec;\n    });\n    this.state = Object.assign(this.state, {\n      'checkers': checkers,\n      'checkedByCheckerId': checkedByCheckerId,\n      attributesByKey: attributesByKey,\n      factionsByKey: factionsByKey,\n      includeTotalStats: false,\n      championDimension: DIMENSION_NONE,\n      numberer: new Numberer()\n    });\n  }\n\n  /**\n   * Helper proc to make the label info.\n   * If 'info' is a string, returns info for making a string label.\n   * Else, it's a dict, it's for making a 'BarSpecifier'.\n   * @param {*} info \n   */\n  makeLabelInfo(info) {\n    if (typeof (info) === \"string\") {\n      return { 'text': info };\n    } else if (\"is_range\" in info) {\n      return { 'range': info };\n    } else {\n      return { 'bar': info };\n    }\n  }\n\n  onRankRangeChange(v) {\n    this.setState({\n      rankRange: v\n    });\n  }\n\n  onAffinityBarChange(v) {\n    this.setState({\n      affinityBar: v\n    });\n  }\n\n  onFactionBarChange(v) {\n    this.setState({ factionBar: v });\n  }\n\n  onVaultBarChange(v) {\n    this.setState({\n      vaultBar: v\n    });\n  }\n\n  onBooksBarChange(v) {\n    this.setState({ booksBar: v });\n  }\n\n  onMarkerBarChange(v) {\n    this.setState({ markerBar: v });\n  }\n\n  onMasteriesBarChange(v) {\n    this.setState({ masteriesBar: v });\n  }\n\n  CheckByRankRange(champion, extra) {\n    if (!champion || !champion.grade) return null;\n    var asNum = extra.numberer.RankFromStars(champion.grade);\n    var bounds = extra.rankRange || [1, 6];\n    return (asNum >= bounds[0] && asNum <= bounds[1]) ? DONT_DISPLAY : null;\n  }\n\n  // these guys can't refer to 'this', so extra state is passed\n  // in 2nd param.\n  CheckAffinity(champion, extra) {\n    if (!champion || !champion.element) return null;\n    var key = champion.element.toLowerCase();\n    var bar = extra.affinityBar;\n    if (!bar) {\n      return DONT_DISPLAY; // unset affinity bar.\n    }\n    var passes = (key === bar.toLowerCase());\n    return passes ? DONT_DISPLAY : null;\n  }\n\n  CheckFaction(champion, extra) {\n    if (!champion || !champion.fraction) return null;\n    var key = champion.fraction;\n    var bar = extra.factionBar;\n    if (!bar) {\n      return DONT_DISPLAY;\n    }\n    var passes = (key.toLowerCase() === bar.toLowerCase());\n    // console.log('champ', champion.name, 'fraction', champion.fraction, 'bar', bar);\n    return passes ? DONT_DISPLAY : null;\n  }\n\n  CheckVault(champion, extra) {\n    if (!champion) return null;\n    var inStorage = ('inStorage' in champion) && (champion.inStorage === true);\n    var bar = extra.vaultBar;\n    var passes = (inStorage === (bar === \"yes\"));\n    return passes ? DONT_DISPLAY : null;\n  }\n\n  CheckMasteries(champion, extra) {\n    if (!champion) return null;\n    var howMany = extra.NumMasteriesFor(champion);\n    var passes = true;\n    const MAX_MASTERIES = 15;\n    switch (extra.masteriesBar) {\n      case MASTERIES_NONE:\n        passes = (howMany === 0);\n        break;\n      case MASTERIES_SOME:\n        passes = (howMany > 0) && (howMany < MAX_MASTERIES);\n        break;\n      case MASTERIES_ALL:\n        passes = (howMany >= MAX_MASTERIES);\n        break;\n      default:\n        passes = true;\n        break;\n    }\n    return passes;\n  }\n\n  CheckBooks(champion, extra) {\n    if (!champion) return null;\n    var skillsFactory = extra.skillsFactory;\n    if (!skillsFactory) return null;\n    var skills = skillsFactory.SkillsFor(champion);\n    if (!skills) return null;\n    var unbooked = [];\n    var partiallyBooked = [];\n    var fullyBooked = [];\n    var numSkills = 0;\n    skills.forEach((skillBundle) => {\n      numSkills++;\n      // skills.push({ id: id, name: name, level: level, maxLevel: maxLevel });\n      if (skillBundle.level === skillBundle.maxLevel) {\n        fullyBooked.push(<li key={skillBundle.id}><span class=\"skill_name\">{skillBundle.name}</span></li>)\n      } else if (skillBundle.level > 1) {\n        partiallyBooked.push(<li key={skillBundle.id}><span class=\"skill_name\">{skillBundle.name}</span> {skillBundle.level}/{skillBundle.maxLevel}</li>)\n      } else {\n        unbooked.push(<li key={skillBundle.id}><span class=\"skill_name\">{skillBundle.name}</span></li>)\n      }\n    });\n    var bar = extra.booksBar;\n    var passes = null;\n    switch (bar) {\n      case BOOKS_NONE:\n        passes = (unbooked.length === numSkills) ? DONT_DISPLAY : null;\n        break;\n      case BOOKS_SOME:\n        passes = (partiallyBooked.length > 0) ?\n          DONT_DISPLAY /* <ul>{partiallyBooked}</ul> */ : null;\n        break;\n      case BOOKS_ALL:\n        passes = (fullyBooked.length === numSkills) ? DONT_DISPLAY : null;\n        break;\n      default:\n        passes = null;\n    }\n    return passes;\n  }\n\n  CheckMarker(champion, extra) {\n    if (!champion) return null;\n    var champKey = champion.marker ? champion.marker.toLowerCase() : \"\";\n    var bar = extra.markerBar;\n    var passes = champKey === bar.toLowerCase();\n    return passes ? DONT_DISPLAY : null;\n  }\n\n  CheckHasDupe(champion, extra) {\n    if (!champion || !champion.name) return null;\n    var key = champion.name.toLowerCase();\n    var championCounts = extra.championCounts;\n    var count = (key in championCounts) ? championCounts[key] : 0;\n    return (count > 1) ? (\"one of \" + count) : null;\n  }\n  CheckUnderAscended(champion) {\n    if (!champion || !champion.grade) return null;\n    var numberer = new Numberer();\n    var rank = numberer.RankFromStars(champion.grade);\n    var ascensions = champion.awakenLevel;\n    return (rank > ascensions) ?\n      (\"Rank \" + rank + \", but only \" + ascensions + \" ascensions\") : null;\n  }\n  CheckMissingArmor(champion, extra) {\n    if (!champion) return null;\n    var numWorn = 0;\n    var artifacts = extra.artifacts;\n    if (artifacts) {\n      artifacts.forEach((artifact) => {\n        if (artifact && artifact.setKind && artifact.setKind !== \"None\") {\n          numWorn++;\n        }\n      });\n    }\n    if (numWorn < 6) {\n      var why = \"only wearing \" + numWorn + \" pieces of armor\";\n      //console.log(champion.name + why);\n      return why;\n    }\n    return null;\n  }\n\n  CheckGlyphable(champion, extra) {\n    if (!champion) return null;\n    var artifacts = extra.artifacts;\n    var artifactTypeMap = extra.artifactTypeMap;\n    var attributesByKey = extra.attributesByKey;\n    if (!artifacts) return null;\n\n    var whys = [];\n    artifacts.some((artifact) => {\n      if (!artifact.secondaryBonuses) return false;\n      artifact.secondaryBonuses.forEach((bonus) => {\n        var attribute = bonus.kind;\n        var attrSpec = attributesByKey[attribute.toLowerCase()];\n        if (attrSpec && attrSpec.glyphable && bonus.enhancement < 0.001) {\n          var why = artifactTypeMap[artifact.kind.toLowerCase()].label\n            + \": unglyphed '\"\n            + attrSpec.label\n            + \"' bonus\"\n          whys.push(why);\n        }\n      });\n      return false;\n    });\n    if (whys.length === 0) {\n      return null;\n    } else {\n      return whys.join(\". \");\n    }\n  }\n\n  CheckMissingAccessory(champion, extra) {\n    if (!champion || !champion.grade || !champion.awakenLevel) return null;\n    var numberer = new Numberer();\n    var rank = numberer.RankFromStars(champion.grade);\n    var artifacts = extra.artifacts;\n    var artifactTypeMap = extra.artifactTypeMap;\n    if (!artifactTypeMap) return null;\n    // foreach artifact type - if their rank qualifies,\n    // and their ascensions qualify, then check and see if it's worn:\n    // this is O(n**2), but *n* is so small it doesn't matter.\n    var why = null;\n    for (let key in artifactTypeMap) {\n      var artifactType = artifactTypeMap[key];\n      if (!artifactType.isAccessory) continue;\n      if (artifactType.rankNeeded > rank) {\n        //console.log(champion.name + ', only rank ' + rank + ': no ' + artifactType.label);\n        continue;\n      }\n      if (artifactType.ascensionsNeeded > champion.awakenLevel) continue;\n      // they could be wearing it - are they?\n      var wearing = false;\n      var lcKey = key.toLowerCase();\n      for (let i in artifacts) {\n        var artifact = artifacts[i];\n        if (artifact.kind && artifact.kind.toLowerCase() === lcKey) {\n          wearing = true;\n          break;\n        }\n      };\n      if (!wearing) {\n        why = \"not wearing a \" + artifactType.label;\n        break;\n      }\n    };\n    return why;\n  }\n\n  CheckInferiorGear(champion, extra) {\n    if (!champion || !champion.grade) return null;\n    var numberer = new Numberer();\n    var rank = numberer.RankFromStars(champion.grade);\n    var artifacts = extra.artifacts;\n    if (!artifacts) return null;\n    var why = null;\n    artifacts.some((artifact) => {\n      var artRank = numberer.Rank(artifact.rank);\n      if (rank - artRank >= 2) {\n        var artifactTypeMap = extra.artifactTypeMap;\n        var label = artifactTypeMap[artifact.kind.toLowerCase()].label;\n        why = \"rank \" + rank + \", but wearing a rank \" + artRank + \" \" + label;\n        return true;\n      }\n      return false;\n    });\n    return why;\n  }\n\n  CheckInferiorRarity(champion, extra) {\n    var numberer = new Numberer();\n    var artifacts = extra.artifacts;\n    if (!artifacts) return null;\n    var why = null;\n    artifacts.some((artifact) => {\n      var artRarity = numberer.Rarity(artifact.rarity);\n      if (artRarity < 2) {\n        var artifactTypeMap = extra.artifactTypeMap;\n        var label = artifactTypeMap[artifact.kind.toLowerCase()].label;\n        why = label + \" is only rarity '\" + artifact.rarity + \"'\";\n        return true;\n      }\n      return false;\n    });\n    return why;\n  }\n\n  renderWornArtifacts(artifacts) {\n    var formatter = new Formatter();\n    if (!artifacts || artifacts.length === 0) {\n      return null;\n    }\n    var pieces = [];\n    artifacts.forEach((artifact, index) => {\n      //console.log('artifact = ' + JSON.stringify(artifact));\n      pieces.push(<li key={artifact.id}>{formatter.ArtifactShort(artifact)}</li>);\n    });\n    return (<ul>{pieces}</ul>);\n  }\n  onFilterChange(newState, checker) {\n    //console.log(\"newState = \" + newState + \", checker id = \" + checker.id);\n    var cur = this.state.checkedByCheckerId;\n    cur[checker.id] = newState;\n    this.setState({ checkedByCheckerId: cur });\n  }\n\n\n  checkerHtmlLabel(checker) {\n    var body = checker.label;\n    if (checker.labelInfo) {\n      if ('text' in checker.labelInfo) {\n        body = checker.labelInfo.text;\n      } else if ('bar' in checker.labelInfo) {\n        var props = checker.labelInfo.bar;\n        /**\n         * This took me forever to find. If I'm making a BarSpecifier,\n         * the 'initial' value must be set _at render time_. So not\n         * in the constructor. not anywhere else. Otherwise, React won't know\n         * to re-render the component when the appropriate state variable changes.\n         * So the 'labelInfo', for a BarSpecifier, has 'dynamic', a *function* that\n         * is called at run-time to evaluate any non-static values.\n         */\n        var dynamicProps = ('dynamic' in props) ? props.dynamic() : {};\n        //console.log('dynamicProps =', JSON.stringify(dynamicProps));\n        // put dynamicProps last here so it 'trumps' static values.\n        var stamped = Object.assign({}, props, dynamicProps);\n        // the bar specifier\n        body = <BarSpecifier {...stamped} />;\n      } else if ('range' in checker.labelInfo) {\n        props = checker.labelInfo.range;\n        dynamicProps = ('dynamic' in props) ? props.dynamic() : {};\n        //console.log('dynamicProps =', JSON.stringify(dynamicProps));\n        // put dynamicProps last here so it 'trumps' static values.\n        stamped = Object.assign({}, props, dynamicProps);\n        body = <RangeSpecifier {...stamped} />;\n      }\n    }\n    return checker.ttip ?\n      (<Tooltip title={checker.ttip}>{body}</Tooltip>)\n      : body;\n  }\n\n  renderSelectorPart() {\n    var rows = [];\n    var curCols = [];\n    const BOXES_PER_ROW = 3; // needs to divide into 24\n    var span = 24 / BOXES_PER_ROW;\n    this.state.checkers.forEach((checker, index) => {\n      if ((index % BOXES_PER_ROW) === 0) {\n        // end current row, start a new one.\n        if (curCols.length > 0) {\n          rows.push(<Row>{curCols}</Row>);\n        }\n        curCols = [];\n      }\n\n      var cur = this.state.checkedByCheckerId[checker.id];\n      curCols.push(<Col className=\"gutter-row\" span={span}>\n        <div><Switch size=\"small\" checked={cur} onChange={(checked, e) => { this.onFilterChange(checked, checker) }}></Switch>&nbsp;\n          {this.checkerHtmlLabel(checker)}</div>\n      </Col>)\n    });\n    if (curCols.length > 0) {\n      rows.push(<Row>{curCols}</Row>);\n    }\n\n    const divStyle = { \"textAlign\": \"left\" };\n    return (<div style={divStyle}>\n      <p><b>Show champions that pass <i>all</i> these checks:</b></p>\n      <hr />\n      {rows}\n      <hr />\n    </div >);\n  }\n\n  onIncludeTotalStatsChange(checked) {\n    var calculator = new TotalStatsCalculator();\n    var numCalced = 0;\n    var totalStats = this.props.knownChampionTotalStats;\n    var t0 = Date.now();\n    // takes roughly 0.4 millis per champion, so even with 500\n    // champions it's only 0.2 seconds. If this was way longer\n    // some notification would be called for.\n    if (checked && this.props.champions && totalStats) {\n      // fill in all the total stats.\n      this.props.champions.some((champion) => {\n        if (champion.id in totalStats) {\n          return false;\n        }\n        //console.log('calculating for ', champion.name);\n        var newStats = calculator.MakeAndBake(champion, this.props.arenaKey, this.props.greatHallLevels, this.props.artifactsById);\n        totalStats[champion.id] = newStats;\n        numCalced++;\n        return false;\n      });\n    }\n    var t1 = Date.now();\n    console.log('computed ', numCalced, ' new stats, took', (t1 - t0), 'millis');\n    if (numCalced > 0 && this.props.reportNewTotalStats) {\n      this.props.reportNewTotalStats(totalStats);\n    }\n    this.setState({ includeTotalStats: checked });\n  }\n\n  renderDisplayModePart() {\n    return (\n      <div>\n        Show total stats:&nbsp;&nbsp;\n        <Switch size=\"medium\" checked={this.state.includeTotalStats} onChange={(checked, e) => { this.onIncludeTotalStatsChange(checked) }}></Switch>\n        <hr />\n      </div>\n    )\n  }\n\n  getTotalStat(attrKey, championTotalStats) {\n    // if should be there as the 'value' in the first bonus\n    // in the (attribte) entry\n    if (!championTotalStats) return null;\n    var column = championTotalStats[TOTALS_COLUMN];\n    if (!column) return null;\n    var bonusList = championTotalStats[TOTALS_COLUMN][attrKey.toLowerCase()];\n    if (!bonusList) return null;\n    return bonusList.Bonuses()[0].value;\n  }\n\n  renderTotalStat(attrKey, championTotalStats) {\n    var val = this.getTotalStat(attrKey, championTotalStats);\n    return val ? val : \"--\";\n  }\n\n  renderSkills(skillsArray) {\n    var asList = this.formatter.Skills(skillsArray);\n    return asList;\n  }\n\n  compareTotalStat(key, champ1Stats, champ2Stats) {\n    var v1 = this.getTotalStat(key, champ1Stats);\n    var v2 = this.getTotalStat(key, champ2Stats);\n    if (!v1 && !v2) return 0;\n    if (!v1) return 1;\n    if (!v2) return -1;\n    return v1 - v2;\n  }\n\n  addStatsColumnHeaders(columns) {\n    if (!columns || !this.state.includeTotalStats) return;\n    attributesConfig.attributes.forEach((attrSpec) => {\n      var key = attrSpec.jsonKey;\n      var headerEntry = {\n        title: 'Total ' + attrSpec.label,\n        key: key,\n        dataIndex: 'champion_total_stats',\n        render: (championTotalStats) => this.renderTotalStat(key, championTotalStats),\n        sorter: (a, b) => this.compareTotalStat(key, a.champion_total_stats, b.champion_total_stats)\n      };\n      columns.push(headerEntry);\n    });\n  }\n\n  onDimensionChange(newDimension) {\n    if (newDimension === this.state.championDimension) {\n      return;\n    }\n    this.setState({ championDimension: newDimension });\n  }\n\n  championSorter(c1, c2) {\n    var comparer = new Comparer();\n    return comparer.ChampionsOn(c1, c2, this.state.championDimension)\n  }\n\n  skillsSorter(s1, s2) {\n    if (!s1 && !s2) return 0;\n    if (!s1) return 1;\n    if (!s2) return -1;\n    var levels1 = 0;\n    s1.forEach((skillBundle) => {\n      levels1 += skillBundle.level;\n    })\n    var levels2 = 0;\n    s2.forEach((skillBundle) => {\n      levels2 += skillBundle.level;\n    })\n    return levels1 - levels2;\n  }\n\n  NumMasteriesFor(champ) {\n    return (champ && champ.masteries) ? champ.masteries.length : 0;\n  }\n\n  render() {\n    var numberer = new Numberer();\n    if (!this.props.champions || this.props.champions.length === 0) {\n      return (<div><span>No champions to show</span></div>);\n    }\n    // must match the values in Comparer.js:\n    var dimensionLabels = [\n      \"Name\",\n      \"Rank\",\n      \"Rarity\",\n      \"Level\",\n      \"Affinity\",\n      \"Marker\",\n      \"Faction\"\n    ]\n\n    var runeHeader = <ArtifactDimensionChooser initialValue={this.state.championDimension}\n      labels={dimensionLabels}\n      reporter={(value) => this.onDimensionChange(value)} />;\n\n    var columns = [\n      {\n        title: runeHeader,\n        dataIndex: 'champion',\n        key: 'champion',\n        render: (champion) => <ChampionRune champion={champion} />,\n        sorter: (a, b) => { return this.championSorter(a.champion, b.champion) },\n      },\n      {\n        title: 'Role',\n        dataIndex: 'role',\n        key: 'role',\n        sorter: (a, b) => a.role.localeCompare(b.role),\n      },\n      {\n        title: 'Skills',\n        dataIndex: 'skills',\n        key: 'skills',\n        render: (skillsArray) => { return this.formatter.Skills(skillsArray) },\n        sorter: (a, b) => this.skillsSorter(a.skills, b.skills)\n      },\n      {\n        title: 'Ascensions',\n        dataIndex: 'awakenLevel',\n        key: 'awakenLevel',\n        sorter: (a, b) => a.champion.awakenLevel - b.champion.awakenLevel,\n      },\n      {\n        title: '# Masteries',\n        dataIndex: 'masteries',\n        key: 'masteries',\n        sorter: (a, b) => this.NumMasteriesFor(a.champion) - this.NumMasteriesFor(b.champion)\n      }];\n    if (this.state.includeTotalStats)\n      this.addStatsColumnHeaders(columns);\n    columns.push(\n      {\n        title: 'Details',\n        dataIndex: 'why',\n        key: 'why'\n      });\n    const dataByRows = [\n    ];\n\n    // the checkers all work on 1 champion at a time.\n    // that doesn't work to find dupes. Kludge it by computing\n    // that in advance and remembering it, and then pass\n    // to every checker.\n    var championCounts = {};\n    this.props.champions.some((champion) => {\n      if (!champion.name) return false;\n      var key = champion.name.toLowerCase();\n      var v = (key in championCounts) ? championCounts[key] : 0;\n      championCounts[key] = v + 1;\n      return false;\n    });\n    // same deal with the artifact types:\n    // keep a map from artifact type to data\n    var artifactTypeMap = {};\n    artifactTypeConfig.artifact_types.forEach((typeSpec) => {\n      artifactTypeMap[typeSpec.key.toLowerCase()] = typeSpec;\n    });\n    var skillsFactory = new SkillsFactory();\n\n    this.props.champions.forEach((champion) => {\n      var artifacts = [];\n      if ('artifacts' in champion) {\n        champion.artifacts.forEach((artifactId) => {\n          if (artifactId in this.props.artifactsById) {\n            artifacts.push(this.props.artifactsById[artifactId]);\n          } else {\n            artifacts.push(\"[\" + artifactId + \"]\");\n          }\n        });\n      }\n      var passesAll = true;\n      var extra = Object.assign({\n        artifacts: artifacts,\n        championCounts: championCounts,\n        artifactTypeMap: artifactTypeMap,\n        skillsFactory: skillsFactory,\n        NumMasteriesFor: this.NumMasteriesFor,\n      },\n        this.state\n      );\n      var whys = [];\n      this.state.checkers.some((checker) => {\n        if (this.state.checkedByCheckerId[checker.id]) {\n          var why = checker.fn(champion, extra);\n          if (!why) {\n            passesAll = false;\n            return true; // end the loop\n          } else {\n            if (DONT_DISPLAY !== why) {\n              whys.push(why);\n            }\n          }\n        }\n        return false; // keep going\n      });\n      if (passesAll) {\n        var rowData = {\n          key: champion.id,\n          id: champion.id,\n          // sometimes we get champions with no name, odd.\n          // I think is for new champions.\n          champion: champion,\n          faction: champion.fraction,\n          grade: numberer.RankFromStars(champion.grade),\n          element: champion.element,\n          role: champion.role,\n          level: champion.level,\n          inStorage: champion.inStorage,\n          artifacts: artifacts,\n          marker: champion.marker,\n          awakenLevel: champion.awakenLevel,\n          masteries: this.NumMasteriesFor(champion),\n          champion_total_stats: this.props.knownChampionTotalStats ?\n            this.props.knownChampionTotalStats[champion.id] : null,\n          skills: skillsFactory.SkillsFor(champion),\n          why: whys.join(',')\n        };\n        dataByRows.push(rowData);\n      }\n    });\n\n    const paginationConfig = false;\n    return (\n      <div className=\"runed_rows\" >\n        <h3>There are {dataByRows.length} Champions.</h3>\n        {this.renderSelectorPart()}\n        {this.renderDisplayModePart()}\n        <Table pagination={paginationConfig} dataSource={dataByRows} columns={columns} />\n      </div >\n    );\n  }\n}\n\nexport default ChampionPage;","import React from 'react';\nimport Formatter from './Formatter';\nimport Numberer from './Numberer';\n\n/**\n * Floats atop most of the time, shows the current champs,\n * and other generally useful info.\n * \n * props:\n *   curChamp - current champion.\n *   fileName  - current file name\n */\nclass HeaderDetail extends React.Component {\n  render() {\n    // looks like you can only fit one line.\n    var champ = this.props.curChamp;\n    var formatter = new Formatter();\n    var numberer = new Numberer();\n    var parts = [];\n    if (this.props.fileName) {\n      parts.push(<span key=\"0\">file <b>{this.props.fileName}</b>:&nbsp;</span>);\n    }\n\n    if (champ) {\n      parts.push(<span key=\"0.5\">Looking at ....</span>);\n      parts.push(<span key=\"1\">{champ.rarity}</span>);\n      parts.push(<span key=\"2\"> {champ.element}</span>);\n      parts.push(<span key=\"3\"> {numberer.RankFromStars(champ.grade)} *</span>);\n      parts.push(formatter.Faction(champ.fraction));\n      parts.push(<span key=\"4\">  <b>{champ.name}</b></span>);\n    }\n    var champLine = <div className=\"header_detail\">{parts}</div>;\n    return champLine;\n  }\n}\n\nexport default HeaderDetail;","import React from 'react';\n\nclass HelpPage extends React.Component {\n    render() {\n        return (<div className=\"help_page\" style={{ textAlign: 'left' }}>\n\n            <p>Welcome! This program, 'Brago', can take a JSON file containing\n        the state of your <i>Raid Shadow Legends</i> champions and artifacts,\n        and perform a few simple analyses on them.\n    </p>\n            <p>\n                You <i>get</i> the JSON file in the first place by using\n            Jake Croteau's great <a href=\"https://github.com/LukeCroteau/RaidExtractor\">RaidExtractor</a>.\n            Go to that site and read about how the tool and how to use it.\n            Once you have a JSON file you created with it, then you can use\n            Brago.\n        </p>\n\n            <p>\n                Brago shows you a list of things you can do, on the left nav-menu: \"Load JSON\", \"View Champions\", etc.\n                You can't really do anything interesting until you've loaded your JSON file,\n                so start by doing that. click on the \"Load JSON\" selection, then on the \"Choose File\" button,\n                and open the JSON file you want analyzed.\n        </p>\n            <p>\n                You will then see the left nav menu change, to show that you\n                now have loaded the data. For example, something like this:\n                </p>\n            <img src=\"/pix/help/left_nav_after_load.png\" alt=\"nav menu after load\" />\n            <h3>The pages</h3>\n            <ul>\n                <li><a href=\"#view_champions\">The 'View Champions' page</a></li>\n                <li><a href=\"#view_artifacts\">The 'View Artifacts' page</a></li>\n                <li><a href=\"#to_bump\">The 'Artifact Enhancement' page</a></li>\n                <li><a href=\"#champion_detail\">The 'Champion Detail' page</a></li>\n                <li><a href=\"#arena\">The 'Arena Tier' screen</a></li>\n                <li><a href=\"#great_hall\">The 'Great Hall' page</a></li>\n\n\n            </ul>\n            <h2 id=\"view_champions\">The 'View (some) Champions' screen</h2>\n            <p>\n                This screen lets you view some champions - those who pass\n                some filters, where you indicate which filters you are interested in.\n        </p>\n            <p>\n                The default filter is to only show champions who aren't in the vault. So for example, you'll see initially\n                something like this:\n        </p>\n            <img src=\"/pix/help/champions_start.png\" alt=\"champions who aren't in the vault\" />\n            <p>\n                The filters are hopefully self-explanatory, and some have tooltips that explain what they do in\n                more detail if you hover over them. For example, the 'under-ascended' hover says\n                'fewer ascensions than rank'. If I turn that filter on,\n                it shows that in my I have 169 champions that fit that description, however many of them are 'food'\n                or in the vault.\n        </p>\n            <img src=\"/pix/help/champions_under_ascended.png\" alt=\"champions who are under-ascended\" />\n            <p>\n                To cut that down further, I can add more filters. For example,\n                the 'Rank' filter lets you only include champions at a certain\n                level or above, or a certain level or below (indicate which by\n                clicking on the &le;/&ge; symbol).\n            </p>\n            <p>\n                In my case, if I indicate that I only want champions of rank 5\n                or more, now we're down to 7:\n            </p>\n            <img src=\"/pix/help/champions_under_ascended_2.png\" alt=\"champions who are under-ascended\" />\n            <p>\n                The second champion has no name - this happens when a new champion has been added\n                to the game and the 'extractor' doesn't know about them yet.\n</p>\n            <p>\n                Lastly, let's add another filter, and only count champions who aren't in the vault:\n</p>\n            <img src=\"/pix/help/champions_under_ascended_3.png\" alt=\"champions who are under-ascended\" />\n            <p>\n                Note the 'why' column, which can give more detail from the filter.\n                By the way, if you have more than one filter on, presently it will only\n            give you extra detail from the <i>last</i> filter in the list at the top.\n        </p>\n            <h2 id=\"view_artifacts\">The 'View Artifacts' screen</h2>\n            <p>\n                If you're like me, you're always running out of room for your Artifacts.\n                This screen helps you with that. It lets you filter your artifacts in a bunch of ways.\n                Most notably, it shows a bunch of heuristics that I've collected\n                from youtubers like 'Ash', 'HellHades', and 'MurderInc' about what to sell.\n                You can turn them on/off individually.\n            </p>\n            <p>\n                When you first come to the page, it'll look something like this:\n                <img src=\"/pix/help/sell_top.png\" alt=\"checks to run\" />\n            </p>\n            <p>You can see 13 different filters that you can turn on and off. Artifacts that\n                pass <i>every</i> filter are displayed. The default is to have one filter on:\n                only show unworn gear.\n            <p>\n                    You can see that this doesn't narrow down the field enough - \"at least 500\"\n                    artifacts pass this filter. Let's add another one - one of the\n                    heuristics on artifacts to sell is to sell gloves of Atk% (the theory being that\n                    if it's an attack champ, you'd rather have Crit Rate/Damage gloves anyways).\n                Turn that filter on, and now you'll see far fewer results:</p>)\n            </p>\n            <p>\n                <img src=\"/pix/help/sell_1.png\" alt=\"1 check on\" />\n            </p>\n            <p>\n                Let's take another example. The most aggressive heuristic is one\n                from youtuber 'Murder Inc', and it's to sell anything with 2 or more\n                substats, if neither is speed. If I turn that on, it shows me\n                a whopping 337 to sell.\n            </p>\n            <img src=\"/pix/help/sell_2.png\" alt=\"sell aggressive\" />\n            <p>\n                That's awfully aggressive. Let's say that I want to keep\n                anything that's 6 stars. So set the 'Rank' filter to &le; 5,\n                and turn the filter on, and now I see 272. Still a lot, but\n                not as many. I can verify that the filter is working by\n                sorting on 'Rank' descending, see that the max value is '5'\n            </p>\n            <img src=\"/pix/help/sell_3.png\" alt=\"sell sorted\" />\n            <p>\n                I could instead sort by 'Rarity' ascending, and now I'll\n                some Rare items, of Rank &le; 5, unworn, with at least 2 substats,\n                    with no speed substat. <i>These</i> I can start selling.\n                </p>\n            <img src=\"/pix/help/sell_4.png\" alt=\"sell sorted Rares\" />\n\n            <h2 id=\"to_bump\">The 'Artifact Enhancement' screen</h2>\n            <p>\n                When you're in an artifact enhancement event, you only\n                get points when an artifact is enhanced to a level that's\n                a multiple of 4 (4,8,12,16).\n        </p>\n            <p>\n                Many players enhance artifacts to just short\n                of a multiple of 4 when not in an artifact enhancement event.\n                Then when the event comes you get the points while spending a lot less money.\n        </p>\n            <p>\n                If that's of interest to you, press this button and you'll see\n                something like this:\n            <img src=\"/pix/help/bump_output.png\" alt=\"display of artifacts to bump\" />\n            </p>\n            <p>\n                At the top, it's telling you how many artifacts you could 'bump', and how many event\n                VP you will gain if you bump them all.\n            </p>\n            <p>\n                Then it shows you the candidates. For example, in this case, the first candidate\n                is a 5* Rare Demonspawn ring, that's at level 11.\n            </p>\n            <p>\n                The dropdown 'Sort on' lets you specify which attribute of the artifacts you want to\n                sort on (assuming you do). You can sort by rank, level, faction, rarity, etc.\n                Specify that with the drop-down and then click on the little arrows to sort.\n            </p>\n\n            <h2 id=\"champion_detail\">The 'Champion Detail' screen</h2>\n            <p>\n                The visuals on this page are very rough, so be kind :).\n                It lets you view all the information about a champion, including, most importantly,\n                a more detailed breakdown of their 'total stats' than the game gives you.\n            </p>\n            <p>\n                Once you've loaded a JSON file, if you go to this page, you will see an auto-complete box.\n                This lets you choose which champion you want details on.\n                <img src=\"/pix/help/detail_auto_start.png\" alt=\"champion chooser\" />\n            </p>\n            <p>\n                As you type, you will see champions who have what you've typed in their name. For example, below you see what\n                I get after typing 'Arm'. If you've put a marker on your champ, you will see that in parentheses.\n                For example, I have an Armiger with the 'Build II' marker. If you <i>don't</i> have a marker\n                on the champ, you will see its ID in parentheses, this helps you if you have a buncha champions\n                with the same name and you haven't put markers on them.\n                <img src=\"/pix/help/detail_auto_typing.png\" alt=\"typing away\" />\n            </p>\n            <p>\n                In this case, I picked Kael (we <i>all</i> have a Kael, right? :)\n                Note three things at the top of the screen:\n                <img src=\"/pix/help/detail_top.png\" alt=\"the top 3 lines\" />\n            </p>\n            <ul>\n                <li>The 'Looking at' line in the header shows who you chose, and you'll see it as you go\n                into other pages in the app. The idea is that someday you might be able to\n                do other things, like optimize gear or whatever.\n                    </li>\n                <li>\n                    The chooser is still there - type somebody else's name to pick a diffferent champ.\n\n                    </li>\n                <li>\n                    The third line is just like the first, but starts to add more detail.\n                    </li>\n            </ul>\n            <p>\n                Below that, you'll see a dump of all the gear your champion is wearing, including\n                main stats, sub stats, and enhancements (those are in the parens after a substat).\n                For example, my Kael has an Epic 5* Speed weapon, level 16, with an Attack main stat. The first substat is a 5% boost to 'Atk %', enchanted to 7%.\n                </p>\n            <img src=\"/pix/help/detail_artifacts.png\" alt=\"the top 3 lines\" />\n            <p>\n                Below that, you'll see the 'Masteries'. You'll see 7 of Kael's masteries, including\n                'Lore of Steel' (you get this by hovering over an icon).\n                </p>\n            <img src=\"/pix/help/detail_masteries.png\" alt=\"the masteries\" />\n            <p>\n                The best comes last: the 'total stats'. This is the same as the 'total stats' you see in the game, or at least\n                tries to be. It includes your Great Hall bonuses (if you entered those in), and your Arena level (if you entered thos in),\n                and your masteries (for masteries Brago knows about). The results should be within 1 of\n                what you see in the game - there can be rounding differences. If you see a difference of more than 1,\n                it means there's a mastery I don't know about yet. If you see this, if you could send me your JSON file, with a description of the\n                champion and the mastery that's missing, that would help.\n                </p>\n            <img src=\"/pix/help/detail_stats.png\" alt=\"the masteries\" />\n            <p>\n                The one thing here that adds value over what you see in the game are the numbers\n                    in <span color=\"blue\">blue</span>. If you hover over those, you will get a detailed\n                    breakdown. For example, if I hover over the '14871' HP I get from Artifacts,\n                    I can see this broken down. I find this helpful.\n                </p>\n            <img src=\"/pix/help/detail_breakdown.png\" alt=\"stat breakdown\" />\n            <h2 id=\"arena\">The 'Arena' screen</h2>\n            <p>\n                This page lets you see what Arena Tier you're in.\n                This will be used on the 'Champion Detail' page when computing your total stats.\n            </p>\n            <p>\n                The information is stored in a cookie, so you don't have to re-type it every time\n                you come to the site.\n            </p>\n            <h2 id=\"great_hall\">The 'Great Hall' screen</h2>\n            <p>\n                This page lets you see your Great Hall levels.\n                This will be used on the 'Champion Detail' page when computing your total stats.\n            </p>\n        </div >\n        );\n    }\n}\nexport default HelpPage;","import React from 'react';\nimport { Layout } from 'antd';\nimport NavMenu from './NavMenu';\nimport GreatHall from './GreatHall';\nimport AboutPage from './AboutPage';\nimport { VERSION } from './AboutPage';\nimport Arena from './Arena';\nimport RaidJsonLoader from './RaidJsonLoader';\nimport ArtifactPage from './ArtifactPage';\nimport ArtifactBumpPage from './ArtifactBumpPage';\nimport ArtifactSellPage from './ArtifactSellPage';\nimport ChampionDetailPage from './ChampionDetailPage';\nimport ChampionPage from './ChampionPage';\nimport HeaderDetail from './HeaderDetail';\nimport HelpPage from './HelpPage';\nimport IdleTimer from 'react-idle-timer';\nimport ReactGA from 'react-ga';\nimport TotalStatsCalculator from './TotalStatsCalculator';\n\n\nexport const OTHER_GEAR_UNWORN = \"unworn\";\nexport const OTHER_GEAR_VAULT = \"vault\";\nexport const OTHER_GEAR_ALL = \"all\";\n\n// how long should I wait before doing idle processing,\n// AND how long does the idle process get to do its thing\nconst IDLE_HYSTERESIS = 300;\n\nclass TopLevel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: 'none',\n            greatHallLevels: {},\n            lockedSlots: {}, // keys are gear types that are locked.\n            eligibleRanks: {\n                'one': true, 'two': true, 'three': true,\n                'four': true, 'five': true, 'six': true\n            },\n            hasDoneSomething: true\n            // setSpec map from set key to {None, Some, Set}. Default is 'Some'\n            // fileName name of last loaded file.\n        }\n        this.idleTimer = null;\n        this.idleCounter = 0;\n        this.totalStatsCalculator = new TotalStatsCalculator();\n    }\n    handleShowPage(which) {\n        this.setState({ currentPage: which });\n    }\n    componentDidMount() {\n        ReactGA.initialize('UA-195025167-1');\n        ReactGA.pageview(window.location.pathname + window.location.search);\n        if (localStorage) {\n            var fileName = localStorage.getItem(\"file_name\");\n            var artifacts = null;\n            var champions = null;\n            var arenaKey = null;\n            var greatHallLevels = null;\n            try {\n                artifacts = JSON.parse(localStorage.getItem(\"file_artifacts\"));\n                champions = JSON.parse(localStorage.getItem(\"file_champions\"));\n                arenaKey = localStorage.getItem(\"arena_key\");\n                greatHallLevels = JSON.parse(localStorage.getItem(\"great_hall_levels\"));\n            } catch (err) {\n            }\n\n            this.onLoadJson(artifacts, champions, fileName, arenaKey, greatHallLevels);\n        }\n    };\n\n    onAction(e) {\n        //console.log(this.counter++, 'user did something', e)\n        this.setState({ hasDoneSomething: true })\n    }\n\n    onActive(e) {\n        //console.log(this.counter++, 'user is active', e)\n        //this.setState({ hasDoneSomething: true })\n    }\n\n    computeTotalStatsFor(champion) {\n        if (!champion) return;\n        if ((champion.id in this.state.knownChampionTotalStats)) return;\n        var stats = this.totalStatsCalculator.MakeAndBake(champion, this.state.arenaKey, this.state.greatHallLevels, this.state.artifactsById);\n        //console.log('topLevel: computed stats for ' + champion.name);\n        this.onComputeTotalStats(champion.id, stats);\n    }\n\n    doIdleProcessing() {\n        // starting at (nextIndexForTotalStats), find a champion\n        // whose total stats aren't known.\n        var firstIndex = this.state.nextIndexForTotalStats;\n        var champs = this.state.champions;\n        if (!champs) return;\n        if (this.state.haveAllTotalStats) return;\n        var index = firstIndex;\n\n        for (; ;) {\n            if (index >= champs.length) {\n                index = 0;\n            }\n            var champId = champs[index].id;\n            if (champId in this.state.knownChampionTotalStats) {\n                index++;\n                if (index === firstIndex) {\n                    this.setState({ haveAllTotalStats: true });\n                    return;\n                }\n            } else {\n                this.computeTotalStatsFor(champs[index]);\n                this.setState({ nextIndexForTotalStats: index + 1 });\n                return;\n            }\n        }\n    }\n\n    onComputeTotalStats(champId, totalStats) {\n        //console.log('just computed stats for champ id ' + champId);\n        var cur = this.state.knownChampionTotalStats;\n        cur[champId] = totalStats;\n        this.setState({ knownChampionTotalStats: cur });\n\n    }\n\n    // called when app enters idle state.\n    onIdle(e) {\n        if (this.state.hasDoneSomething) {\n            // not anymore, they haven't....\n            this.setState({ hasDoneSomething: false });\n            // and start the countdown...\n            this.idleTimer.reset();\n        } else {\n            // time to do something on idle\n            //console.log(this.counter++, 'DO ONIDLE')\n            this.doIdleProcessing();\n            // and start the countdown to the NEXT onIdle\n            this.idleTimer.reset();\n        }\n    }\n\n    onLoadJson(artifacts, champions, fileName, arenaKey, greatHallLevels) {\n        if (arenaKey) {\n            arenaKey = arenaKey.toLowerCase();\n        }\n        var artifactsById = {}\n        if (artifacts) {\n            artifacts.forEach((artifact) => {\n                artifactsById[artifact.id] = artifact;\n            });\n        }\n        if (champions) {\n            champions.forEach((champion) => {\n                if ('artifacts' in champion) {\n                    champion.artifacts.forEach((artifactId) => {\n                        if (artifactId in artifactsById) {\n                            artifactsById[artifactId].wearer = champion;\n                        }\n                    });\n                };\n            });\n        }\n        if (localStorage) {\n            if (fileName) {\n                localStorage.setItem(\"file_name\", fileName);\n                localStorage.setItem(\"file_artifacts\", JSON.stringify(artifacts));\n                localStorage.setItem(\"file_champions\", JSON.stringify(champions));\n                localStorage.setItem(\"great_hall_levels\", JSON.stringify(greatHallLevels));\n                localStorage.setItem(\"arena_key\", arenaKey);\n            } else {\n                localStorage.removeItem(\"file_name\");\n                localStorage.removeItem(\"file_artifacts\");\n                localStorage.removeItem(\"file_champions\");\n                localStorage.removeItem(\"great_hall_levels\");\n                localStorage.removeItem(\"arena_key\");\n            }\n        }\n\n        this.setState({\n            artifacts: artifacts,\n            artifactsById: artifactsById,\n            champions: champions,\n            fileName: fileName,\n            arenaKey: arenaKey,\n            greatHallLevels: greatHallLevels,\n            knownChampionTotalStats: {},\n            haveAllTotalStats: false,\n            nextIndexForTotalStats: 0\n        });\n    }\n\n    onNewTotalStatsBulk(newTotals) {\n        this.setState({\n            knownChampionTotalStats: newTotals,\n            haveAllTotalStats: false\n        });\n    }\n\n    onChooseChampion(champion) {\n        var gearByIds = {};\n        if (champion && champion.artifacts) {\n            champion.artifacts.forEach((artifactId) => {\n                gearByIds[artifactId] = true;\n            });\n        }\n        this.setState({ curChamp: champion });\n    }\n\n    renderContent() {\n        var whichPage = this.state.currentPage;\n        // default page on returning is the champion chooser page.\n        if (whichPage === \"none\" && this.state.champions && this.state.champions.length > 0) {\n            whichPage = 'champion chooser';\n        }\n\n        switch (whichPage) {\n            case 'about':\n                return <AboutPage />;\n            case 'arena':\n                return <Arena\n                    arenaKey={this.state.arenaKey} />\n            case 'artifacts':\n                if ('artifacts' in this.state) {\n                    return (<ArtifactPage artifacts={this.state.artifacts} />);\n                } else {\n                    return (\n                        <RaidJsonLoader fileName={this.state.fileName} reporter={(artifacts, champions, fileName, arenaKey, greatHallLevels) => this.onLoadJson(artifacts, champions, fileName, arenaKey, greatHallLevels)} />\n                    )\n                }\n            case 'bump artifacts':\n                if ('artifacts' in this.state) {\n                    return (<ArtifactBumpPage artifacts={this.state.artifacts} />);\n                } else {\n                    return (\n                        <RaidJsonLoader fileName={this.state.fileName} reporter={(artifacts, champions, fileName, arenaKey, greatHallLevels) => this.onLoadJson(artifacts, champions, fileName, arenaKey, greatHallLevels)} />\n                    )\n                }\n            case 'sell artifacts':\n                if ('artifacts' in this.state) {\n                    return (<ArtifactSellPage artifacts={this.state.artifacts} />);\n                } else {\n                    return (\n                        <RaidJsonLoader fileName={this.state.fileName} reporter={(artifacts, champions, fileName, arenaKey, greatHallLevels) => this.onLoadJson(artifacts, champions, fileName, arenaKey, greatHallLevels)} />\n                    )\n                }\n            case 'champion chooser':\n                if ('champions' in this.state) {\n                    return (<ChampionDetailPage\n                        champions={this.state.champions}\n                        artifactsById={this.state.artifactsById}\n                        curChamp={this.state.curChamp}\n                        arenaKey={this.state.arenaKey}\n                        greatHallLevels={this.state.greatHallLevels}\n                        knownChampionTotalStats={this.state.knownChampionTotalStats}\n                        onComputeTotalStats={(champId, stats) => this.onComputeTotalStats(champId, stats)}\n                        reporter={(champion) => this.onChooseChampion(champion)} />);\n                } else {\n                    return (\n                        <RaidJsonLoader fileName={this.state.fileName} reporter={(artifacts, champions, fileName, arenaKey, greatHallLevels) => this.onLoadJson(artifacts, champions, fileName, arenaKey, greatHallLevels)} />\n                    )\n                }\n            case 'champions':\n                if ('champions' in this.state) {\n                    return (<ChampionPage fileName={this.state.fileName} champions={this.state.champions}\n                        knownChampionTotalStats={this.state.knownChampionTotalStats}\n                        reportNewTotalStats={(newStats) => this.onNewTotalStatsBulk(newStats)}\n                        arenaKey={this.state.arenaKey}\n                        greatHallLevels={this.state.greatHallLevels}\n                        artifactsById={this.state.artifactsById} />);\n                } else {\n                    return (\n                        <RaidJsonLoader fileName={this.state.fileName} reporter={(artifacts, champions, fileName, arenaKey, greatHallLevels) => this.onLoadJson(artifacts, champions, fileName, arenaKey, greatHallLevels)} />\n                    )\n                }\n            case 'great hall':\n                return <GreatHall\n                    greatHallLevels={this.state.greatHallLevels}\n                    reporter={(affinity, attr, value) => this.onGreatHallNewState(affinity, attr, value)} />\n            case 'help':\n                return <HelpPage />;\n            case 'load json':\n                return (\n                    <RaidJsonLoader fileName={this.state.fileName} reporter={(artifacts, champions, fileName, arenaKey, greatHallLevels) => this.onLoadJson(artifacts, champions, fileName, arenaKey, greatHallLevels)} />\n                );\n            default:\n                return (<p>Please start by clicking on 'Load JSON' and loading a JSON file</p>);\n        }\n    }\n    render() {\n        const { Header, Footer, Sider, Content } = Layout;\n        return (\n            <Layout>\n                <Header>\n                    <IdleTimer\n                        ref={ref => { this.idleTimer = ref }}\n                        element={document}\n                        onActive={(e) => this.onActive(e)}\n                        onIdle={(e) => this.onIdle(e)}\n                        onAction={(e) => this.onAction(e)}\n                        debounce={100}\n                        timeout={IDLE_HYSTERESIS} />\n                    <HeaderDetail\n                        curChamp={this.state.curChamp} fileName={this.state.fileName}></HeaderDetail></Header>\n                <Layout>\n                    <Sider><NavMenu haveChamps={false}\n                        artifacts={this.state.artifacts}\n                        champions={this.state.champions}\n                        curChamp={this.state.curChamp}\n                        arenaKey={this.state.arenaKey}\n                        greatHallLevels={this.state.greatHallLevels}\n                        lockedSlots={this.state.lockedSlots}\n                        eligibleRanks={this.state.eligibleRanks}\n                        handleShowPage={(which) => this.handleShowPage(which)}\n                        fileName={this.state.fileName}\n                    />\n                    </Sider>\n                    <Content>{this.renderContent()}</Content>\n                </Layout>\n                <Footer style={{ 'textAlign': 'left' }}><span>Brago version {VERSION}</span></Footer>\n            </Layout>\n        );\n\n    }\n}\n\nexport default TopLevel;\n","//import logo from './logo.svg';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport TopLevel from './TopLevel';\n//import forceIcon from '../public/pix/force_icon.png';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopLevel />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}